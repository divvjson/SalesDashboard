@using SalesDashboard.Services

@implements IDisposable
@inject AdventureWorksDbCommandService AdventureWorksDbCommandService
@inject CircuitAccessor CircuitAccessor

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    public BehaviorSubject<EnumConsoleState> ConsoleStateSubject = new(EnumConsoleState.Closed);

    public BehaviorSubject<AdventureWorksDbCommandInfo?> LatestConsoleLogEntrySubject = new(null);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private IDisposable? LatestDbCommandInfoSubcription { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LatestDbCommandInfoSubcription = AdventureWorksDbCommandService.DbCommandInfoEntries
                .Subscribe(keyValuePair => HandleLatestDbCommandInfo(keyValuePair));
        }
    }

    public IReadOnlyList<KeyValuePair<string, AdventureWorksDbCommandInfo>> GetDbCommandInfoEntries()
    {
        return AdventureWorksDbCommandService.GetDbCommandInfoEntries
            .Where(keyValuePair => keyValuePair.Key == CircuitAccessor.CircuitId)
            .ToList();
    }

    private void HandleLatestDbCommandInfo(KeyValuePair<string, AdventureWorksDbCommandInfo> keyValuePair)
    {
        if (keyValuePair.Key == CircuitAccessor.CircuitId == false)
        {
            return;
        }

        var latestCommandInfoForThisCircuit = keyValuePair.Value;

        if (latestCommandInfoForThisCircuit is null)
        {
            return;
        }

        LatestConsoleLogEntrySubject.OnNext(latestCommandInfoForThisCircuit);
    }

    public void Toggle()
    {
        if (ConsoleStateSubject.Value is EnumConsoleState.Open)
        {
            Close();
        }
        else if (ConsoleStateSubject.Value is EnumConsoleState.Closed)
        {
            Open();
        }
    }

    public void Open()
    {
        if (ConsoleStateSubject.Value is EnumConsoleState.Closed)
        {
            ConsoleStateSubject.OnNext(EnumConsoleState.Open);
        }
    }

    public void Close()
    {
        if (ConsoleStateSubject.Value is EnumConsoleState.Open)
        {
            ConsoleStateSubject.OnNext(EnumConsoleState.Closed);
        }
    }

    public void Dispose()
    {
        LatestDbCommandInfoSubcription?.Dispose();
    }
}
