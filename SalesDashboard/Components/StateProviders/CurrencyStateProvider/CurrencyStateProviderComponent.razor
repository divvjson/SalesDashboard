@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Entities
@using SalesDashboard.Services.Scoped.LocalStorage

@inject LocalStorageService LocalStorageService
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    public BehaviorSubject<EnumCurrency> Currency { get; set; } = new(EnumCurrency.USD);

    public BehaviorSubject<decimal> AverageRate { get; set; } = new(1);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var currency = await LocalStorageService.GetItemAsync<EnumCurrency?>($"{nameof(CurrencyStateProviderComponent)}.{nameof(Currency)}");

            if (currency.HasValue)
            {
                Currency.OnNext(currency.Value);

                var averageRate = await GetLatestAverageRateForCurrency(currency.Value);

                AverageRate.OnNext(averageRate);
            }
            else
            {
                Currency.OnNext(EnumCurrency.USD);
                AverageRate.OnNext(1);
            }
        }
    }

    public async Task SetCurrencyAsync(EnumCurrency currency)
    {
        await LocalStorageService.SetItemAsync($"{nameof(CurrencyStateProviderComponent)}.{nameof(Currency)}", currency);

        Currency.OnNext(currency);

        var averageRate = await GetLatestAverageRateForCurrency(currency);

        AverageRate.OnNext(averageRate);
    }

    private async Task<decimal> GetLatestAverageRateForCurrency(EnumCurrency currency)
    {
        if (currency is EnumCurrency.USD)
        {
            return 1;
        }

        using var context = DbFactory.CreateDbContext();

        var averageRate = await context.CurrencyRates
            .Where(currencyRate => currencyRate.ToCurrencyCode == currency.ToString())
            .OrderByDescending(currencyRate => currencyRate.CurrencyRateDate)
            .Select(currencyRate => currencyRate.AverageRate)
            .FirstOrDefaultAsync();

        return averageRate;
    }
}
