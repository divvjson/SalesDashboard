@using SalesDashboard.Components.Shared.Dialog

<DialogComponent DialogSize="EnumDialogSize.Large">
    <HeaderContent>
        @MudDialog.Title
    </HeaderContent>
    <BodyContent>
        <div class="select-period">
            <div class="select-period-value">
                @if (From.HasValue)
                {
                    @From.Value.Date.ToShortDateString()
                }
                -
                @if (Through.HasValue)
                {
                    @Through.Value.Date.ToShortDateString()
                }
            </div>
            <div class="select-period-pickers">
                <MudDatePicker @ref="FromPicker" @bind-Date="From" MinDate="MinDate" MaxDate="MaxDate" PickerVariant="PickerVariant.Static" ShowToolbar="false" />
                <MudDatePicker @ref="ThroughPicker" @bind-Date="Through" MinDate="MinDate" MaxDate="MaxDate" PickerVariant="PickerVariant.Static" ShowToolbar="false" />
            </div>
        </div>
    </BodyContent>
    <FooterContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleOk" DropShadow="false" Disabled="From is null || Through is null">OK</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="MudDialog.Cancel" DropShadow="false">Cancel</MudButton>
    </FooterContent>
</DialogComponent>

@code {
    #pragma warning disable BL0007

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    private MudDatePicker FromPicker { get; set; } = null!;

    [Parameter]
    public DateTime? MinDate { get; set; }

    [Parameter]
    public DateTime? MaxDate { get; set; }

    private DateTime? from;
    [Parameter]
    public DateTime? From
    {
        get { return from; }
        set
        { 
            from = value;

            if (from.HasValue && through.HasValue)
            {
                if (from.Value > through.Value)
                {
                    Through = from;
                    ThroughPicker.GoToDate(Through.Value);
                }
            }
        }
    }

    private MudDatePicker ThroughPicker { get; set; } = null!;

    private DateTime? through;
    [Parameter]
    public DateTime? Through
    {
        get { return through; }
        set
        {
            through = value;

            if (through.HasValue && from.HasValue)
            {
                if (through.Value < from.Value)
                {
                    From = through;
                    FromPicker.GoToDate(From.Value);
                }
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (From.HasValue)
            {
                FromPicker.GoToDate(From.Value);
            }

            if (Through.HasValue)
            {
                ThroughPicker.GoToDate(Through.Value);
            }
        }
    }

    private void HandleOk()
    {
        if (From is null || Through is null)
        {
            return;
        }

        SelectPeriodDialogResult dialogResult = new()
        {
            From = From.Value,
            Through = Through.Value
        };

        MudDialog.Close(DialogResult.Ok(dialogResult));
    }
}
