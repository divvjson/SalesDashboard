@using SalesDashboard.Components.StateProviders.BreakpointStateProvider
@using SalesDashboard.Pages.Regional

@implements IDisposable

<MudExpansionPanels style="@GetMudExpansionPanelsStyle()">
    <MudExpansionPanel style="@GetMudExpansionPanelStyle()">
        <TitleContent>
            <div class="filter-settings-title-container">
                <div>Filter Settings</div>
                <MudBadge Content="NumberOfSettingsSet"
                          Color="Color.Default"
                          Overlap="true"
                          Bordered="true"
                          Visible="NumberOfSettingsSet > 0">
                    <MudIcon Icon="@Icons.Material.Outlined.FilterAlt" />
                </MudBadge>
            </div>
        </TitleContent>
        <ChildContent>
            <div class="filter-settings-expansion-panel-container">
                @ChildContent
            </div>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    public BreakpointStateProviderComponent BreakpointStateProviderComponent { get; set; } = null!;

    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private int NumberOfSettingsSet { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RegionalFilterChangedSubscription = RegionalFilterStateProviderComponent.RegionalFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(_ =>
                {
                    NumberOfSettingsSet = RegionalFilterStateProviderComponent.NumberOfSettingsSet;
                });

            NumberOfSettingsSet = RegionalFilterStateProviderComponent.NumberOfSettingsSet;
        }
    }

    private string GetMudExpansionPanelsStyle()
    {
        var styleString = "border-radius: 4px; padding-top: 24px;";

        if (BreakpointStateProviderComponent.BreakpointStateSubject.Value <= EnumBreakpointState.B_Small_600_904)
        {
            styleString += " padding-left: 12px; padding-right: 12px;";
        }
        else
        {
            styleString += " padding-left: 24px; padding-right: 24px;";
        }

        return styleString;
    }

    private string GetMudExpansionPanelStyle()
    {
        var styleString = "background-color: var(--gray-50);";

        return styleString;
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
    }
}
