@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities
@using SalesDashboard.Services

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject CircuitAccessor CircuitAccessor

<SpinnerOverlayComponent IsVisible="IsChartDataLoading">
    <div class="top-5-best-selling-products">
        <MudChart ChartType="ChartType.StackedBar"
                  ChartSeries="ChartSeries"
                  ChartOptions="ChartOptions"
                  Width="100%"
                  Height="100%" />
    </div>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public ProductStateProviderComponent ProductStateProviderComponent { get; set; } = null!;

    private IDisposable? ProductFilterChangedSubscription { get; set; }

    private IDisposable? Top5BestSellingProductsRefreshedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    public List<ChartSeries> ChartSeries { get; set; } = new();

    private ChartOptions ChartOptions { get; set; } = new()
    {
        YAxisTicks = 500
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProductFilterChangedSubscription = ProductStateProviderComponent.ProductFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryChartDataAsync());

            Top5BestSellingProductsRefreshedSubscription = ProductStateProviderComponent.Top5BestSellingProductsRefreshed
                .Subscribe(async _ => await RequeryChartDataAsync());

            await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        var period = ProductStateProviderComponent.Period.Value;
        var countryRegionNames = ProductStateProviderComponent.CountryRegionNames.Value;
        var productCategoryNames = ProductStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = ProductStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = ProductStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        if (period is not null)
        {
            if (period.Start.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate >= period.Start.Value);
            }

            if (period.End.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate <= period.End.Value);
            }
        }

        if (countryRegionNames.Any())
        {
            query = query.Where(sod => countryRegionNames.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        var items = await query
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.COMMAND_NAME, "Top 5 Best Selling Products"))
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.CIRCUIT_ID, CircuitAccessor.CircuitId))
            .GroupBy(sod => sod.Product.Name)
            .Select(g => new Top5BestSellingProductsItem
            {
                ProductName = g.Key,
                UnitsSold = g.Sum(sod => sod.OrderQty)
            })
            .OrderByDescending(item => item.UnitsSold)
            .Take(5)
            .ToListAsync();

        List<ChartSeries> chartSeries = new();

        for (int i = 0; i < items.Count; i++)
        {
            ChartSeries chartSerie = new()
            {
                Name = $"{items[i].ProductName} ({items[i].UnitsSold})",
                Data = new double[items.Count]
            };

            chartSerie.Data[i] = items[i].UnitsSold;

            chartSeries.Add(chartSerie);
        }

        ChartSeries = chartSeries;

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ProductFilterChangedSubscription?.Dispose();
        Top5BestSellingProductsRefreshedSubscription?.Dispose();
    }
}
