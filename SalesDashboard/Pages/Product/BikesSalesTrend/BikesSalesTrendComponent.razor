@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<SpinnerOverlayComponent IsVisible="IsChartDataLoading">
    <div class="bikes-sales-trend">
        @if (ChartSeries.Any() is false)
        {
            
        }
        else if (Years.Count() is 1)
        {
            
        }
        else
        {
            <MudChart ChartType="ChartType.Line"
                      ChartSeries="ChartSeries"
                      ChartOptions="ChartOptions"
                      XAxisLabels="Years"
                      Width="100%"
                      Height="100%" />
        }
    </div>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public ProductStateProviderComponent ProductStateProviderComponent { get; set; } = null!;

    private IDisposable? ProductFilterChangedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    private string[] Years { get; set; } = [];

    private List<ChartSeries> ChartSeries { get; set; } = new();

    private ChartOptions ChartOptions { get; set; } = new()
    {
        
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProductFilterChangedSubscription = ProductStateProviderComponent.ProductFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryChartDataAsync());

            await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        var period = ProductStateProviderComponent.Period.Value;
        var countryRegionNames = ProductStateProviderComponent.CountryRegionNames.Value;
        var productCategoryNames = ProductStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = ProductStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = ProductStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        if (period is not null)
        {
            if (period.Start.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate >= period.Start.Value);
            }

            if (period.End.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate <= period.End.Value);
            }
        }

        if (countryRegionNames.Any())
        {
            query = query.Where(sod => countryRegionNames.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        var items = await query
            .Where(sod => sod.Product.ProductSubcategory != null && sod.Product.ProductSubcategory.ProductCategory.Name == "Bikes")
            .GroupBy(sod => sod.SalesOrder.OrderDate.Year)
            .Select(g => new BikesSalesTrendItem
            {
                Year = g.Key,
                UnitsSold = g.Sum(sod => sod.OrderQty)
            })
            .OrderBy(item => item.Year)
            .ToListAsync();

        ChartSeries = [];

        ChartSeries.Add(new()
        {
            Name = "Units Sold",
            Data = items.Select(item => (double)item.UnitsSold).ToArray()
        });

        Years = items
            .Select(item => item.Year)
            .Distinct()
            .OrderBy(year => year)
            .Select(year => year.ToString())
            .ToArray();

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ProductFilterChangedSubscription?.Dispose();
    }
}
