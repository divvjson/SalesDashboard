@page "/Product"

@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.FilterSettings
@using SalesDashboard.Components.Shared.PageBox
@using SalesDashboard.Components.Shared.SelectCountryDialog
@using SalesDashboard.Components.Shared.SelectPeriodDialog
@using SalesDashboard.Components.Shared.SelectProductCategoryDialog
@using SalesDashboard.Components.Shared.SelectProductDialog
@using SalesDashboard.Components.Shared.SelectProductSubcategoryDialog
@using SalesDashboard.Entities
@using SalesDashboard.Pages.Product.BestSellingBike
@using SalesDashboard.Pages.Product.BikesSalesTrend
@using SalesDashboard.Pages.Product.DistributionOfSalesByProductCategory
@using SalesDashboard.Pages.Product.ProductSummaryMatrix
@using SalesDashboard.Pages.Product.Top3SubcategoriesWithHighestGrossMargin
@using SalesDashboard.Pages.Product.Top5BestSellingProducts
@using SalesDashboard.Types

@inject IDialogService DialogService
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<PageTitle>Product Analysis</PageTitle>

<div class="product">
    <div class="product-container mud-elevation-4">
        <div class="header">
            <div></div>
            <div class="header-title">Product Analysis</div>
            <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Variant="Variant.Filled" OnClick="HandleRefreshClicked" title="Refresh" />
        </div>
        <FilterSettingsComponent NumberOfFilterSettingsSet="ProductStateProviderComponent.NumberOfFilterSettingsSet">
            <FilterSettingsItemComponent Key="Period" Value="ProductStateProviderComponent.Period.Value" OnSelect="HandleSelectPeriodClickedAsync" />
            <MudDivider />
            <FilterSettingsItemComponent Key="Country" Value="ProductStateProviderComponent.CountryRegionNames.Value" OnSelect="HandleSelectCountryClickedAsync" />
            <MudDivider />
            <FilterSettingsItemComponent Key="Product Category" Value="ProductStateProviderComponent.ProductCategoryNames.Value" OnSelect="HandleSelectProductCategoryClickedAsync" />
            <MudDivider />
            <FilterSettingsItemComponent Key="Product Subcategory" Value="ProductStateProviderComponent.ProductSubcategoryNames.Value" OnSelect="HandleSelectProductSubcategoryClickedAsync" />
            <MudDivider />
            <FilterSettingsItemComponent Key="Product" Value="ProductStateProviderComponent.ProductNames.Value" OnSelect="HandleSelectProductClickedAsync" />
            <MudDivider />
            <MudButton Variant="Variant.Outlined" Color="Color.Error" style="align-self: flex-start;" OnClick="ProductStateProviderComponent.ResetAsync">Reset</MudButton>
        </FilterSettingsComponent>
        <div class="grid">
            <div class="quantity-sold">
                <PageBoxComponent Title="Quantity Sold"
                                  OnRefreshClicked="() => ProductStateProviderComponent.QuantitySoldRefreshed.OnNext(Unit.Default)">
                    <QuantitySoldComponent />
                </PageBoxComponent>
            </div>
            <div class="distribution-of-sales-by-product-category">
                <PageBoxComponent Title="Distribution of Sales by Product Category"
                                  OnRefreshClicked="() => ProductStateProviderComponent.DistributionOfSalesByProductCategoryRefreshed.OnNext(Unit.Default)">
                    <DistributionOfSalesByProductCategoryComponent />
                </PageBoxComponent>
            </div>
            <div class="bikes-sales-trend">
                <PageBoxComponent Title="Bikes Sales Trend"
                                  OnRefreshClicked="() => ProductStateProviderComponent.BikesSalesTrendRefreshed.OnNext(Unit.Default)">
                    <BikesSalesTrendComponent />
                </PageBoxComponent>
            </div>
            <div class="best-selling-bike">
                <PageBoxComponent Title="Best Selling Bike"
                                  OnRefreshClicked="() => ProductStateProviderComponent.BestSellingBikeRefreshed.OnNext(Unit.Default)">
                    <BestSellingBikeComponent />
                </PageBoxComponent>
            </div>
            <div class="top-3-subcategories-with-highest-gross-margin">
                <PageBoxComponent Title="Top 3 Subcategories with Highest Gross Margin">
                    <Top3SubcategoriesWithHighestGrossMarginComponent />
                </PageBoxComponent>
            </div>
            <div class="top-5-best-selling-products">
                <PageBoxComponent Title="Top 5 Best Selling Products">
                    <Top5BestSellingProductsComponent />
                </PageBoxComponent>
            </div>
            <div class="product-summary-matrix">
                <PageBoxComponent Title="Summary Matrix">
                    <ProductSummaryMatrixComponent />
                </PageBoxComponent>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public ProductStateProviderComponent ProductStateProviderComponent { get; set; } = null!;

    private bool IsFiguresLoading { get; set; } = true;

    private void HandleRefreshClicked()
    {
        ProductStateProviderComponent.ProductFilterChanged.OnNext(Unit.Default);
    }

    private async Task HandleSelectPeriodClickedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        var firstOrderDate = await context.SalesOrderHeaders.MinAsync(soh => soh.OrderDate);
        var lastOrderDate = await context.SalesOrderHeaders.MaxAsync(soh => soh.OrderDate);
        var period = ProductStateProviderComponent.Period.Value;

        DialogParameters<SelectPeriodDialog> parameters = new()
        {
            { selectPeriodDialog => selectPeriodDialog.MinDate, firstOrderDate },
            { selectPeriodDialog => selectPeriodDialog.MaxDate, lastOrderDate },
            { selectPeriodDialog => selectPeriodDialog.From, period?.Start },
            { selectPeriodDialog => selectPeriodDialog.Through, period?.End }
        };

        var dialog = await DialogService.ShowAsync<SelectPeriodDialog>("Select Period", parameters);

        var result = await dialog.Result;

        if (result?.Data is SelectPeriodDialogResult selectedDates)
        {
            DateTimeRange selectedPeriod = new()
                {
                    Start = selectedDates.From,
                    End = selectedDates.Through
                };

            await ProductStateProviderComponent.SetPeriodAsync(selectedPeriod);
        }
    }

    private async Task HandleSelectCountryClickedAsync()
    {
        DialogParameters<SelectCountryDialog> parameters = new()
        {
            { selectCountryDialog => selectCountryDialog.InitiallySelectedCountryRegionNames, ProductStateProviderComponent.CountryRegionNames.Value.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectCountryDialog>("Select Country", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedCountryRegionNames)
        {
            await ProductStateProviderComponent.SetCountryRegionNamesAsync(selectedCountryRegionNames);
        }
    }

    private async Task HandleSelectProductCategoryClickedAsync()
    {
        DialogParameters<SelectProductCategoryDialog> parameters = new()
        {
            { selectProductCategoryDialog => selectProductCategoryDialog.InitiallySelectedProductCategoryNames, ProductStateProviderComponent.ProductCategoryNames.Value.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectProductCategoryDialog>("Select Product Category", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedProductCategoryNames)
        {
            await ProductStateProviderComponent.SetProductCategoryNamesAsync(selectedProductCategoryNames);
        }
    }

    private async Task HandleSelectProductSubcategoryClickedAsync()
    {
        DialogParameters<SelectProductSubcategoryDialog> parameters = new()
        {
            { selectProductSubcategoryDialog => selectProductSubcategoryDialog.InitiallySelectedProductSubcategoryNames, ProductStateProviderComponent.ProductSubcategoryNames.Value.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectProductSubcategoryDialog>("Select Product Subcategory", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedProductSubcategoryNames)
        {
            await ProductStateProviderComponent.SetProductSubcategoryNamesAsync(selectedProductSubcategoryNames);
        }
    }

    private async Task HandleSelectProductClickedAsync()
    {
        DialogParameters<SelectProductDialog> parameters = new()
        {
            { selectProductDialog => selectProductDialog.InitiallySelectedProductNames, ProductStateProviderComponent.ProductNames.Value.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectProductDialog>("Select Product", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedProductNames)
        {
            await ProductStateProviderComponent.SetProductNamesAsync(selectedProductNames);
        }
    }
}
