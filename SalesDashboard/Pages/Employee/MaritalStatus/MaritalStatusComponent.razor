@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities
@using SalesDashboard.Services

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject CircuitAccessor CircuitAccessor

<SpinnerOverlayComponent IsVisible="IsChartDataLoading">
    <div class="marital-status">
        @if (Data is null)
        {
            
        }
        else
        {
            <MudChart ChartType="ChartType.Pie"
                      InputData="Data"
                      InputLabels="Labels"
                      Height="110px" />
        }
    </div>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public EmployeeStateProviderComponent EmployeeStateProviderComponent { get; set; } = null!;

    private IDisposable? EmployeeFilterChangedSubscription { get; set; }

    private IDisposable? MaritalStatusRefreshedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    private int DataSize { get; set; } = 2;

    private double[]? Data { get; set; } = null;

    private string[]? Labels { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EmployeeFilterChangedSubscription = EmployeeStateProviderComponent.EmployeeFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryChartDataAsync());

            MaritalStatusRefreshedSubscription = EmployeeStateProviderComponent.MaritalStatusRefreshed
                .Subscribe(async _ => await RequeryChartDataAsync());

            await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        using var context = DbFactory.CreateDbContext();

        int totalEmployees = await context.Employees.CountAsync();

        var items = await context.Employees
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.COMMAND_NAME, "Marital Status"))
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.CIRCUIT_ID, CircuitAccessor.CircuitId))
            .GroupBy(e => e.MaritalStatus)
            .Select(g => new MaritalStatusItem
            {
                MaritalStatus = g.Key == "M" ? "Married" : "Single",
                Percentage = (double)g.Count() / totalEmployees * 100
            })
            .OrderByDescending(item => item.Percentage)
            .ToListAsync();

        if (items.Any())
        {
            Data = items
                .Select(item => item.Percentage)
                .ToArray();

            Labels = items
                .Select(item => $"{item.MaritalStatus} ({item.Percentage.ToString("0.##")}%)")
                .ToArray();
        }
        else
        {
            Data = null;
            Labels = null;
        }

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        EmployeeFilterChangedSubscription?.Dispose();
        MaritalStatusRefreshedSubscription?.Dispose();
    }
}
