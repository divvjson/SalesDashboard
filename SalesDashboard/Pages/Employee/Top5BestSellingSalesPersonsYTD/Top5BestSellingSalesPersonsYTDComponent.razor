@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities
@using SalesDashboard.Extensions
@using SalesDashboard.Services

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject CircuitAccessor CircuitAccessor

<SpinnerOverlayComponent IsVisible="IsChartDataLoading">
    <div class="top-5-best-selling-sales-persons-ytd">
        <MudChart ChartType="ChartType.StackedBar"
                  ChartSeries="ChartSeries"
                  ChartOptions="ChartOptions"
                  Width="100%"
                  Height="300" />
    </div>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public EmployeeStateProviderComponent EmployeeStateProviderComponent { get; set; } = null!;

    private IDisposable? EmployeeFilterChangedSubscription { get; set; }

    private IDisposable? Top5BestSellingSalesPersonsYtdRefreshedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    public List<ChartSeries> ChartSeries { get; set; } = new();

    private ChartOptions ChartOptions { get; set; } = new()
    {
        YAxisTicks = 1000000,
        YAxisFormat = "$0"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EmployeeFilterChangedSubscription = EmployeeStateProviderComponent.EmployeeFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryChartDataAsync());

            Top5BestSellingSalesPersonsYtdRefreshedSubscription = EmployeeStateProviderComponent.Top5BestSellingSalesPersonsYtdRefreshed
                .Subscribe(async _ => await RequeryChartDataAsync());

            await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        using var context = DbFactory.CreateDbContext();

        var items = await context.SalesPeople
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.COMMAND_NAME, "Top 5 Best Selling Sales Persons (YTD)"))
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.CIRCUIT_ID, CircuitAccessor.CircuitId))
            .OrderByDescending(sp => sp.SalesYtd)
            .Take(5)
            .Select(sp => new Top5BestSellingSalesPersonsYTDItem
            {
                FirstName = sp.BusinessEntity.BusinessEntity.FirstName,
                LastName = sp.BusinessEntity.BusinessEntity.LastName,
                SalesYtd = (double)sp.SalesYtd
            })
            .ToListAsync();

        List<ChartSeries> chartSeries = new();

        for (int i = 0; i < items.Count; i++)
        {
            ChartSeries chartSerie = new()
            {
                Name = $"{items[i].FirstName} {items[i].LastName} ({items[i].SalesYtd.ToCurrencyWithTwoDecimals()})",
                Data = new double[items.Count]
            };

            chartSerie.Data[i] = items[i].SalesYtd;

            chartSeries.Add(chartSerie);
        }

        ChartSeries = chartSeries;

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        EmployeeFilterChangedSubscription?.Dispose();
        Top5BestSellingSalesPersonsYtdRefreshedSubscription?.Dispose();
    }
}
