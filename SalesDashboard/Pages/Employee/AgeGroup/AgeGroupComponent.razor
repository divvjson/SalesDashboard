@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities
@using SalesDashboard.Helpers
@using SalesDashboard.Services

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject CircuitAccessor CircuitAccessor

<SpinnerOverlayComponent IsVisible="IsChartDataLoading">
    <div class="age-group">
        <MudChart ChartType="ChartType.StackedBar"
                  ChartSeries="ChartSeries"
                  ChartOptions="ChartOptions"
                  Width="100%"
                  Height="300" />
    </div>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public EmployeeStateProviderComponent EmployeeStateProviderComponent { get; set; } = null!;

    private IDisposable? EmployeeFilterChangedSubscription { get; set; }

    private IDisposable? AgeGroupDistributionRefreshedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    public List<ChartSeries> ChartSeries { get; set; } = new();

    private ChartOptions ChartOptions { get; set; } = new()
    {
        YAxisTicks = 20
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EmployeeFilterChangedSubscription = EmployeeStateProviderComponent.EmployeeFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryChartDataAsync());

            AgeGroupDistributionRefreshedSubscription = EmployeeStateProviderComponent.AgeGroupDistributionRefreshed
                .Subscribe(async _ => await RequeryChartDataAsync());

            await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        using var context = DbFactory.CreateDbContext();

        var today = SimulatedDateTime.Today;

        var items = await context.Employees
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.COMMAND_NAME, "Age Group Distribution"))
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.CIRCUIT_ID, CircuitAccessor.CircuitId))
            .Select(e => new
            {
                Age = EF.Functions.DateDiffYear(e.BirthDate, today) - (today.Month < e.BirthDate.Month || (today.Month == e.BirthDate.Month && today.Day < e.BirthDate.Day) ? 1 : 0)
            })
            .GroupBy(e => new
            {
                AgeGroup =
                    e.Age < 30 ? "0-29" :
                    e.Age < 40 ? "30-39" :
                    e.Age < 50 ? "40-49" :
                    e.Age < 60 ? "50-59" :
                    e.Age < 70 ? "60-69" :
                    e.Age < 80 ? "70-79" :
                    "80-above"
            })
            .Select(g => new AgeGroupItem
                {
                    AgeGroup = g.Key.AgeGroup,
                    Count = g.Count()
                })
            .OrderBy(item => item.AgeGroup)
            .ToListAsync();

        List<ChartSeries> chartSeries = new();

        for (int i = 0; i < items.Count; i++)
        {
            ChartSeries chartSerie = new()
            {
                Name = $"{items[i].AgeGroup} ({items[i].Count})",
                Data = new double[items.Count]
            };

            chartSerie.Data[i] = items[i].Count;

            chartSeries.Add(chartSerie);
        }

        ChartSeries = chartSeries;

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        EmployeeFilterChangedSubscription?.Dispose();
        AgeGroupDistributionRefreshedSubscription?.Dispose();
    }
}
