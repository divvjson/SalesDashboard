@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Components.Shared.SummaryMatrixTh
@using SalesDashboard.Entities
@using SalesDashboard.Extensions
@using SalesDashboard.Helpers
@using SalesDashboard.Services

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject CircuitAccessor CircuitAccessor

<SpinnerOverlayComponent IsVisible="IsLoading">
    <MudTable ContainerClass="summary-matrix"
              FixedHeader="true"
              T="EmployeeSummaryMatrixItem"
              Items="EmployeeSummaryMatrixGridItems"
              GroupBy="GroupDefinition"
              Breakpoint="Breakpoint.None"
              Dense="true"
              Striped="true">
        <HeaderContent>
            <MudTh>
                <SummaryMatrixThComponent Title="Department" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Employee" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Age" AggregationMethod="EnumAggregationMethod.Average" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Years of Employment" AggregationMethod="EnumAggregationMethod.Average" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Vacation Days per Year" AggregationMethod="EnumAggregationMethod.Average" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Sick Leave Days per Year" AggregationMethod="EnumAggregationMethod.Average" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Monthly Salary" AggregationMethod="EnumAggregationMethod.Average" />
            </MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            @if (context.GroupName is nameof(EmployeeSummaryMatrixItem.DepartmentName))
            {
                <MudTh colspan="2" style="@GetGroupHeaderRowStyle(context)">@context.Key</MudTh>
            }
            else if (context.GroupName is nameof(EmployeeSummaryMatrixItem.EmployeeName))
            {
                <MudTh></MudTh>
                <MudTh style="@GetGroupHeaderRowStyle(context)">@context.Key</MudTh>
            }
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @Math.Round(@context.Items.Average(item => item.Age))
            </MudTh>
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @Math.Round(@context.Items.Average(item => item.YearsOfEmployment))
            </MudTh>
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @Math.Round(@context.Items.Average(item => item.VacationDaysPerYear))
            </MudTh>
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @Math.Round(@context.Items.Average(item => item.SickLeaveDaysPerYear))
            </MudTh>
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @context.Items.Average(item => item.MonthlySalary).ToCurrencyWithTwoDecimals()
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Department">@context.DepartmentName</MudTd>
            <MudTd DataLabel="Employee">@context.EmployeeName</MudTd>
            <MudTd DataLabel="Age">@context.Age</MudTd>
            <MudTd DataLabel="Years of Employment">@context.YearsOfEmployment</MudTd>
            <MudTd DataLabel="Vacation Days per Year">@context.VacationDaysPerYear</MudTd>
            <MudTd DataLabel="Sick Leave Days per Year">@context.SickLeaveDaysPerYear</MudTd>
            <MudTd DataLabel="Monthly Salary">@context.MonthlySalary</MudTd>
        </RowTemplate>
    </MudTable>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public EmployeeStateProviderComponent EmployeeStateProviderComponent { get; set; } = null!;

    private IDisposable? EmployeeFilterChangedSubscription { get; set; }

    private IDisposable? EmployeeSummaryMatrixRefreshedSubscription { get; set; }

    private bool IsLoading { get; set; } = false;

    private List<EmployeeSummaryMatrixItem> EmployeeSummaryMatrixGridItems { get; set; } = [];

    private TableGroupDefinition<EmployeeSummaryMatrixItem> GroupDefinition { get; set; } = new()
    {
        GroupName = nameof(EmployeeSummaryMatrixItem.DepartmentName),
        IsInitiallyExpanded = false,
        Indentation = true,
        Expandable = true,
        Selector = (item) => item.DepartmentName,
        InnerGroup = new()
        {
            GroupName = nameof(EmployeeSummaryMatrixItem.EmployeeName),
            IsInitiallyExpanded = false,
            Indentation = true,
            Expandable = false,
            Selector = (item) => item.EmployeeName
        }
    };

    private string GetGroupHeaderRowStyle(TableGroupData<object, EmployeeSummaryMatrixItem> context)
    {
        var styleString = "";

        switch (context.GroupName)
        {
            case nameof(EmployeeSummaryMatrixItem.DepartmentName):
            styleString += " font-weight: 400;";
            break;
            case nameof(EmployeeSummaryMatrixItem.EmployeeName):
            styleString += " font-weight: 300;";
            break;
        }

        return styleString;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EmployeeFilterChangedSubscription = EmployeeStateProviderComponent.EmployeeFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryAsync());

            EmployeeSummaryMatrixRefreshedSubscription = EmployeeStateProviderComponent.EmployeeSummaryMatrixRefreshed
                .Subscribe(async _ => await RequeryAsync());

            await RequeryAsync();
        }
    }

    private async Task RequeryAsync()
    {
        IsLoading = true;

        await InvokeAsync(StateHasChanged);

        using var context = DbFactory.CreateDbContext();

        var today = DateTime.Today;

        var items = await context.EmployeeDepartmentHistories
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.COMMAND_NAME, "Employee Summary Matrix"))
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.CIRCUIT_ID, CircuitAccessor.CircuitId))
            .Where(edh => edh.EndDate == null)
            .Select(edh => new
            {
                DepartmentName = edh.Department.Name,
                FirstName = edh.BusinessEntity.BusinessEntity.FirstName,
                LastName = edh.BusinessEntity.BusinessEntity.LastName,
                Age = EF.Functions.DateDiffYear(edh.BusinessEntity.BirthDate, today) - (edh.BusinessEntity.BirthDate > today.AddYears(-EF.Functions.DateDiffYear(edh.BusinessEntity.BirthDate, today)) ? 1 : 0),
                YearsOfEmployment = EF.Functions.DateDiffYear(edh.BusinessEntity.HireDate, today) - (edh.BusinessEntity.HireDate > today.AddYears(-EF.Functions.DateDiffYear(edh.BusinessEntity.HireDate, today)) ? 1 : 0),
                VacationHours = edh.BusinessEntity.VacationHours,
                SickLeaveHours = edh.BusinessEntity.SickLeaveHours,
                Rate = edh.BusinessEntity.EmployeePayHistories.OrderByDescending(eph => eph.RateChangeDate).Select(eph => eph.Rate).FirstOrDefault()
            })
            .Select(e => new EmployeeSummaryMatrixItem
            {
                DepartmentName = e.DepartmentName,
                EmployeeName = e.FirstName + " " + e.LastName,
                Age = e.Age,
                YearsOfEmployment = e.YearsOfEmployment,
                VacationDaysPerYear = Math.Round((double)(e.VacationHours / 8) / e.YearsOfEmployment),
                SickLeaveDaysPerYear = Math.Round((double)(e.SickLeaveHours / 8) / e.YearsOfEmployment),
                MonthlySalary = e.Rate * 40 * 4
            })
            .OrderBy(item => item.DepartmentName)
            .ThenBy(item => item.EmployeeName)
            .ToListAsync();

        if (items.Any())
        {
            EmployeeSummaryMatrixItem summaryRow = new()
            {
                DepartmentName = string.Empty,
                EmployeeName = string.Empty,
                Age = (int)Math.Round(items.Average(item => item.Age)),
                YearsOfEmployment = Math.Round(items.Average(item => item.YearsOfEmployment)),
                VacationDaysPerYear = Math.Round(items.Average(item => item.VacationDaysPerYear)),
                SickLeaveDaysPerYear = Math.Round(items.Average(item => item.SickLeaveDaysPerYear)),
                MonthlySalary = items.Average(item => item.MonthlySalary)
            };

            items.Add(summaryRow);
        }

        EmployeeSummaryMatrixGridItems = items;

        IsLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        EmployeeFilterChangedSubscription?.Dispose();
        EmployeeSummaryMatrixRefreshedSubscription?.Dispose();
    }
}
