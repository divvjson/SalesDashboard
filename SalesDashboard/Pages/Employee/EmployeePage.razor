@page "/Employee"

@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.FigureBox
@using SalesDashboard.Components.Shared.PageBox
@using SalesDashboard.Entities
@using SalesDashboard.Pages.Employee.AgeGroup
@using SalesDashboard.Pages.Employee.EmployeeLocation
@using SalesDashboard.Pages.Employee.EmployeeSummaryMatrix
@using SalesDashboard.Pages.Employee.GenderDistribution
@using SalesDashboard.Pages.Employee.MaritalStatus
@using SalesDashboard.Pages.Employee.NumberOfEmployeesByDepartment
@using SalesDashboard.Pages.Employee.Top5BestSellingSalesPersonsLastYear
@using SalesDashboard.Pages.Employee.Top5BestSellingSalesPersonsYTD
@using SalesDashboard.Services

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject CircuitAccessor CircuitAccessor

<PageTitle>Employee Analysis</PageTitle>

<div class="employee">
    <div class="employee-container mud-elevation-4">
        <div class="header">
            <div></div>
            <div class="header-title">Employee Analysis</div>
            <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Variant="Variant.Filled" OnClick="HandleRefreshClicked" title="Refresh" />
        </div>
        <div class="grid">
            <div class="total-number-of-employees">
                <PageBoxComponent Title="Total Number of Employees"
                                  ShowRefreshButton="true"
                                  OnRefreshClicked="() => EmployeeStateProviderComponent.TotalNumberOfEmployeesRefreshed.OnNext(Unit.Default)">
                    <FigureBoxComponent Value="@TotalNumberOfEmployees.ToString()" IsLoading="IsFiguresLoading" />
                </PageBoxComponent>
            </div>
            <div class="number-of-employees-by-department">
                <PageBoxComponent Title="Number of Employees by Department"
                                  ShowRefreshButton="true"
                                  OnRefreshClicked="() => EmployeeStateProviderComponent.NumberOfEmployeesByDepartmentRefreshed.OnNext(Unit.Default)">
                    <NumberOfEmployeesByDepartmentComponent />
                </PageBoxComponent>
            </div>
            <div class="age-group">
                <PageBoxComponent Title="Age Group Distribution">
                    <AgeGroupComponent />
                </PageBoxComponent>
            </div>
            <div class="gender-distribution">
                <PageBoxComponent Title="Gender Distribution">
                    <GenderDistributionComponent />
                </PageBoxComponent>
            </div>
            <div class="marital-status">
                <PageBoxComponent Title="Marital Status">
                    <MaritalStatusComponent />
                </PageBoxComponent>
            </div>
            <div class="employee-location">
                <PageBoxComponent Title="Employee Location">
                    <EmployeeLocationComponent />
                </PageBoxComponent>
            </div>
            <div class="top-5-best-selling-sales-persons-ytd">
                <PageBoxComponent Title="Top 5 Best Selling Sales Persons (YTD)">
                    <Top5BestSellingSalesPersonsYTDComponent />
                </PageBoxComponent>
            </div>
            <div class="top-5-best-selling-sales-persons-last-year">
                <PageBoxComponent Title="Top 5 Best Selling Sales Persons (Last Year)">
                    <Top5BestSellingSalesPersonsLastYearComponent />
                </PageBoxComponent>
            </div>
            <div class="employee-summary-matrix">
                <PageBoxComponent Title="Summary Matrix">
                    <EmployeeSummaryMatrixComponent />
                </PageBoxComponent>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EmployeeStateProviderComponent EmployeeStateProviderComponent { get; set; } = null!;

    private IDisposable? EmployeeFilterChangedSubscription { get; set; }

    private IDisposable? TotalNumberOfEmployeesRefreshedSubscription { get; set; }

    private bool IsFiguresLoading { get; set; } = true;

    private int TotalNumberOfEmployees { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EmployeeFilterChangedSubscription = EmployeeStateProviderComponent.EmployeeFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryFiguresAsync());

            TotalNumberOfEmployeesRefreshedSubscription = EmployeeStateProviderComponent.TotalNumberOfEmployeesRefreshed
                .Subscribe(async _ => await RequeryFiguresAsync());

            await RequeryFiguresAsync();
        }
    }

    private void HandleRefreshClicked()
    {
        EmployeeStateProviderComponent.EmployeeFilterChanged.OnNext(Unit.Default);
    }

    private async Task RequeryFiguresAsync()
    {
        IsFiguresLoading = true;

        await InvokeAsync(StateHasChanged);

        using var context = DbFactory.CreateDbContext();

        TotalNumberOfEmployees = await context.Employees
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.COMMAND_NAME, "Total Number of Employees"))
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.CIRCUIT_ID, CircuitAccessor.CircuitId))
            .CountAsync();

        IsFiguresLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        EmployeeFilterChangedSubscription?.Dispose();
        TotalNumberOfEmployeesRefreshedSubscription?.Dispose();
    }
}
