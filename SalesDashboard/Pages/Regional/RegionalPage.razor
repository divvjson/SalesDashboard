@page "/Regional"

@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.FigureBox
@using SalesDashboard.Components.Shared.FilterSettings
@using SalesDashboard.Components.Shared.PageBox
@using SalesDashboard.Components.Shared.SelectCountryDialog
@using SalesDashboard.Components.Shared.SelectPeriodDialog
@using SalesDashboard.Components.Shared.SelectProductCategoryDialog
@using SalesDashboard.Components.Shared.SelectProductDialog
@using SalesDashboard.Components.Shared.SelectProductSubcategoryDialog
@using SalesDashboard.Components.StateProviders.BreakpointStateProvider
@using SalesDashboard.Entities
@using SalesDashboard.Extensions
@using SalesDashboard.Pages.Regional.DistributionOfSales
@using SalesDashboard.Pages.Regional.RegionalSummaryMatrix
@using SalesDashboard.Pages.Regional.SalesTrendTop3Countries
@using SalesDashboard.Pages.Regional.Top3Cities
@using SalesDashboard.Pages.Regional.Top3States
@using SalesDashboard.Types

@implements IDisposable
@inject IDialogService DialogService
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject IConfiguration Configuration

<PageTitle>Regional Analysis</PageTitle>

<div class="regional">
    <div class="regional-container mud-elevation-4">
        <div class="header">
            <div></div>
            <div class="header-title">Regional Analysis</div>
            <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Variant="Variant.Filled" OnClick="HandleRefreshClicked" title="Refresh" />
        </div>
        <FilterSettingsComponent NumberOfFilterSettingsSet="RegionalFilterStateProviderComponent.NumberOfFilterSettingsSet">
            <FilterSettingsItemComponent Key="Period" Value="RegionalFilterStateProviderComponent.Period.Value" OnSelect="HandleSelectPeriodClickedAsync" />
            <MudDivider />
            <FilterSettingsItemComponent Key="Country" Value="RegionalFilterStateProviderComponent.CountryRegionNames.Value" OnSelect="HandleSelectCountryClickedAsync" />
            <MudDivider />
            <FilterSettingsItemComponent Key="Product Category" Value="RegionalFilterStateProviderComponent.ProductCategoryNames.Value" OnSelect="HandleSelectProductCategoryClickedAsync" />
            <MudDivider />
            <FilterSettingsItemComponent Key="Product Subcategory" Value="RegionalFilterStateProviderComponent.ProductSubcategoryNames.Value" OnSelect="HandleSelectProductSubcategoryClickedAsync" />
            <MudDivider />
            <FilterSettingsItemComponent Key="Product" Value="RegionalFilterStateProviderComponent.ProductNames.Value" OnSelect="HandleSelectProductClickedAsync" />
            <MudDivider />
            <MudButton Variant="Variant.Outlined" Color="Color.Error" style="align-self: flex-start;" OnClick="RegionalFilterStateProviderComponent.ResetAsync">Reset</MudButton>
        </FilterSettingsComponent>
        <div class="grid">
            <div class="total-sales">
                <PageBoxComponent Title="Total Sales">
                    <FigureBoxComponent Value="@TotalSales.ToCurrencyWithTwoDecimalsInMillions()" IsLoading="IsFiguresLoading" />
                </PageBoxComponent>
            </div>
            <div class="total-cost">
                <PageBoxComponent Title="Total Cost">
                    <FigureBoxComponent Value="@TotalCost.ToCurrencyWithTwoDecimalsInMillions()" IsLoading="IsFiguresLoading" />
                </PageBoxComponent>
            </div>
            <div class="gross-profit">
                <PageBoxComponent Title="Gross Profit">
                    <FigureBoxComponent Value="@GrossProfit.ToCurrencyWithTwoDecimalsInMillions()" IsLoading="IsFiguresLoading" />
                </PageBoxComponent>
            </div>
            <div class="gross-margin">
                <PageBoxComponent Title="Gross Margin">
                    <FigureBoxComponent Value="@GrossMargin.ToPercentageWithTwoDecimals()" IsLoading="IsFiguresLoading" />
                </PageBoxComponent>
            </div>
            <div class="sales-trend-top-3-countries">
                <PageBoxComponent Title="Sales Trend Top 3 Countries">
                    <SalesTrendTop3CountriesComponent />
                </PageBoxComponent>
            </div>
            <div class="internet-vs-reseller">
                <PageBoxComponent Title="Internet vs Reseller Sales">
                    <InternetVsResellerComponent />
                </PageBoxComponent>
            </div>
            <div class="distribution-of-sales">
                <PageBoxComponent Title="Distribution of Sales by State">
                    <DistributionOfSalesComponent />
                </PageBoxComponent>
            </div>
            <div class="top-3-states">
                <PageBoxComponent Title="Top 3 States (Sales)">
                    <Top3StatesComponent />
                </PageBoxComponent>
            </div>
            <div class="top-3-cities">
                <PageBoxComponent Title="Top 3 Cities (Sales)">
                    <Top3CitiesComponent />
                </PageBoxComponent>
            </div>
            <div class="summary-matrix">
                <PageBoxComponent Title="Summary Matrix">
                    <RegionalSummaryMatrixComponent />
                </PageBoxComponent>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    [CascadingParameter]
    public RegionalDataProviderComponent RegionalDataProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private bool IsFiguresLoading { get; set; } = true;

    private decimal TotalSales { get; set; }

    private decimal TotalCost { get; set; }

    private decimal GrossProfit { get; set; }

    private decimal GrossMargin { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RegionalFilterChangedSubscription = RegionalFilterStateProviderComponent.RegionalFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryFiguresAsync());

            await RequeryFiguresAsync();
        }
    }

    private void HandleRefreshClicked()
    {
        RegionalFilterStateProviderComponent.RegionalFilterChanged.OnNext(Unit.Default);
    }

    private async Task HandleSelectPeriodClickedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        var firstOrderDate = await context.SalesOrderHeaders.MinAsync(soh => soh.OrderDate);
        var lastOrderDate = await context.SalesOrderHeaders.MaxAsync(soh => soh.OrderDate);
        var period = RegionalFilterStateProviderComponent.Period.Value;

        DialogParameters<SelectPeriodDialog> parameters = new()
        {
            { selectPeriodDialog => selectPeriodDialog.MinDate, firstOrderDate },
            { selectPeriodDialog => selectPeriodDialog.MaxDate, lastOrderDate },
            { selectPeriodDialog => selectPeriodDialog.From, period?.Start },
            { selectPeriodDialog => selectPeriodDialog.Through, period?.End }
        };

        var dialog = await DialogService.ShowAsync<SelectPeriodDialog>("Select Period", parameters);

        var result = await dialog.Result;

        if (result?.Data is SelectPeriodDialogResult selectedDates)
        {
            DateTimeRange selectedPeriod = new()
            {
                Start = selectedDates.From,
                End = selectedDates.Through
            };

            await RegionalFilterStateProviderComponent.SetPeriodAsync(selectedPeriod);
        }
    }

    private async Task HandleSelectCountryClickedAsync()
    {
        DialogParameters<SelectCountryDialog> parameters = new()
        {
            { selectCountryDialog => selectCountryDialog.InitiallySelectedCountryRegionNames, RegionalFilterStateProviderComponent.CountryRegionNames.Value.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectCountryDialog>("Select Country", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedCountryRegionNames)
        {
            await RegionalFilterStateProviderComponent.SetCountryRegionNamesAsync(selectedCountryRegionNames);
        }
    }

    private async Task HandleSelectProductCategoryClickedAsync()
    {
        DialogParameters<SelectProductCategoryDialog> parameters = new()
        {
            { selectProductCategoryDialog => selectProductCategoryDialog.InitiallySelectedProductCategoryNames, RegionalFilterStateProviderComponent.ProductCategoryNames.Value.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectProductCategoryDialog>("Select Product Category", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedProductCategoryNames)
        {
            await RegionalFilterStateProviderComponent.SetProductCategoryNamesAsync(selectedProductCategoryNames);
        }
    }

    private async Task HandleSelectProductSubcategoryClickedAsync()
    {
        DialogParameters<SelectProductSubcategoryDialog> parameters = new()
        {
            { selectProductSubcategoryDialog => selectProductSubcategoryDialog.InitiallySelectedProductSubcategoryNames, RegionalFilterStateProviderComponent.ProductSubcategoryNames.Value.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectProductSubcategoryDialog>("Select Product Subcategory", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedProductSubcategoryNames)
        {
            await RegionalFilterStateProviderComponent.SetProductSubcategoryNamesAsync(selectedProductSubcategoryNames);
        }
    }

    private async Task HandleSelectProductClickedAsync()
    {
        DialogParameters<SelectProductDialog> parameters = new()
        {
            { selectProductDialog => selectProductDialog.InitiallySelectedProductNames, RegionalFilterStateProviderComponent.ProductNames.Value.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectProductDialog>("Select Product", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedProductNames)
        {
            await RegionalFilterStateProviderComponent.SetProductNamesAsync(selectedProductNames);
        }
    }

    private async Task RequeryFiguresAsync()
    {
        IsFiguresLoading = true;

        await InvokeAsync(StateHasChanged);

        var getTotalSalesAsyncTask = RegionalDataProviderComponent.GetTotalSalesAsync();
        var getTotalCostAsyncTask = RegionalDataProviderComponent.GetTotalCostAsync();

        var result = await Task.WhenAll([getTotalSalesAsyncTask, getTotalCostAsyncTask]);

        TotalSales = result[0];
        TotalCost = result[1];
        GrossProfit = TotalSales - TotalCost;

        if (TotalSales != 0)
        {
            GrossMargin = GrossProfit / TotalSales;
        }
        else
        {
            GrossMargin = 0;
        }

        IsFiguresLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
    }
}
