@page "/Regional"

@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.FilterSettings
@using SalesDashboard.Components.Shared.PageBox
@using SalesDashboard.Components.Shared.SelectCountryDialog
@using SalesDashboard.Components.Shared.SelectPeriodDialog
@using SalesDashboard.Components.StateProviders.BreakpointStateProvider
@using SalesDashboard.Entities

@inject IDialogService DialogService
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<PageTitle>Regional Analysis</PageTitle>

<div class="regional">
    <div class="regional-container mud-elevation-4">
        <div class="header">
            Regional Analysis
        </div>
        <FilterSettingsComponent>
            <FilterSettingsItemComponent Key="Period" Value="@GetSelectedPeriodString()" OnSelect="HandleSelectPeriodClickedAsync" />
            <FilterSettingsItemComponent Key="Country" Value="@GetSelectedCountryString()" OnSelect="HandleSelectCountryClickedAsync" />
            <MudButton Variant="Variant.Outlined" Color="Color.Error" style="align-self: flex-start;" OnClick="RegionalFilterStateProviderComponent.ResetAsync">Reset</MudButton>
        </FilterSettingsComponent>
        <div class="grid">
            <div class="total-sales">
                <PageBoxComponent Title="Total Sales">
                    Total Sales
                </PageBoxComponent>
            </div>
            <div class="total-cost">
                <PageBoxComponent Title="Total Cost">
                    Total Cost
                </PageBoxComponent>
            </div>
            <div class="gross-profit">
                <PageBoxComponent Title="Gross Profit">
                    Gross Profit
                </PageBoxComponent>
            </div>
            <div class="gross-margin">
                <PageBoxComponent Title="Gross Margin">
                    Gross Margin
                </PageBoxComponent>
            </div>
            <div class="sales-trend-top-3-countries">
                <PageBoxComponent Title="Sales Trend Top 3 Countries">
                    <SalesTrendTop3CountriesComponent />
                </PageBoxComponent>
            </div>
            <div class="internet-vs-reseller">
                <PageBoxComponent Title="Internet vs Reseller Sales">
                    <InternetVsResellerComponent />
                </PageBoxComponent>
            </div>
            <div class="distribution-of-sales">
                <PageBoxComponent Title="Distribution of Sales">
                    Distribution of Sales
                </PageBoxComponent>
            </div>
            <div class="top-3-states">
                <PageBoxComponent Title="Top 3 States (Sales)">
                    Top 3 States
                </PageBoxComponent>
            </div>
            <div class="top-3-cities">
                <PageBoxComponent Title="Top 3 Cities (Sales)">
                    Top 3 Cities
                </PageBoxComponent>
            </div>
            <div class="summary-matrix">
                <PageBoxComponent Title="Summary Matrix">
                    Summary Matrix
                </PageBoxComponent>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    private string GetSelectedPeriodString()
    {
        var from = RegionalFilterStateProviderComponent.From.Value;
        var through = RegionalFilterStateProviderComponent.Through.Value;

        if (from is not null && through is not null)
        {
            return $"{from.Value.Date.ToShortDateString()} - {through.Value.Date.ToShortDateString()}";
        }

        if (from is not null && through is null)
        {
            return $"{from.Value.Date.ToShortDateString()} and onwards";
        }

        if (from is null && through is not null)
        {
            return $"up until {through.Value.Date.ToShortDateString()}";
        }

        return string.Empty;
    }

    private async Task HandleSelectPeriodClickedAsync()
    {
        var parameters = new DialogParameters<SelectPeriodDialog>
        {
            { selectPeriodDialog => selectPeriodDialog.From, RegionalFilterStateProviderComponent.From.Value },
            { selectPeriodDialog => selectPeriodDialog.Through, RegionalFilterStateProviderComponent.Through.Value }
        };

        var dialog = await DialogService.ShowAsync<SelectPeriodDialog>("Select Period", parameters);

        var result = await dialog.Result;

        if (result?.Data is SelectPeriodDialogResult selectedPeriod)
        {
            await RegionalFilterStateProviderComponent.SetFromAsync(selectedPeriod.From);
            await RegionalFilterStateProviderComponent.SetThroughAsync(selectedPeriod.Through);
        }
    }

    private string GetSelectedCountryString()
    {
        var countryRegionCodes = RegionalFilterStateProviderComponent.CountryRegionCodes.Value;

        if (countryRegionCodes is null || countryRegionCodes.Any() is false)
        {
            return string.Empty;
        }

        var selectedCountryNames = DbFactory
            .CreateDbContext()
            .CountryRegions
            .Where(countryRegion => countryRegionCodes.Contains(countryRegion.CountryRegionCode))
            .OrderBy(countryRegion => countryRegion.Name)
            .Select(countryRegion => countryRegion.Name);

        return string.Join(", ", selectedCountryNames);
    }

    private async Task HandleSelectCountryClickedAsync()
    {
        var parameters = new DialogParameters<SelectCountryDialog>
        {
            { selectCountryDialog => selectCountryDialog.InitiallySelectedCountryRegionCodes, RegionalFilterStateProviderComponent.CountryRegionCodes.Value?.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectCountryDialog>("Select Country", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedCountryRegionCodes)
        {
            await RegionalFilterStateProviderComponent.SetCountryRegionCodesAsync(selectedCountryRegionCodes);
        }
    }
}
