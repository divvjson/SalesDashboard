@page "/Regional"

@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.FilterSettings
@using SalesDashboard.Components.Shared.PageBox
@using SalesDashboard.Components.Shared.SelectCountryDialog
@using SalesDashboard.Components.StateProviders.BreakpointStateProvider
@using SalesDashboard.Entities

@implements IDisposable

@inject IDialogService DialogService
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<PageTitle>Regional Analysis</PageTitle>

<div class="regional">
    <div class="regional-container mud-elevation-4">
        <div class="header">
            Regional Analysis
        </div>
        <FilterSettingsComponent>
            <FilterSettingsItemComponent Key="Period" Value="2024-07-02 - 2024-07-09" />
            <FilterSettingsItemComponent Key="Country" Value="@SelectedCountries" OnSelect="HandleSelectCountryClickedAsync" />
        </FilterSettingsComponent>
        <div class="grid">
            <div class="total-sales">
                <PageBoxComponent Title="Total Sales">
                    Total Sales
                </PageBoxComponent>
            </div>
            <div class="total-cost">
                <PageBoxComponent Title="Total Cost">
                    Total Cost
                </PageBoxComponent>
            </div>
            <div class="gross-profit">
                <PageBoxComponent Title="Gross Profit">
                    Gross Profit
                </PageBoxComponent>
            </div>
            <div class="gross-margin">
                <PageBoxComponent Title="Gross Margin">
                    Gross Margin
                </PageBoxComponent>
            </div>
            <div class="sales-trend-top-3-countries">
                <PageBoxComponent Title="Sales Trend Top 3 Countries">
                    <SalesTrendTop3CountriesComponent />
                </PageBoxComponent>
            </div>
            <div class="internet-vs-reseller">
                <PageBoxComponent Title="Internet vs Reseller Sales">
                    <InternetVsResellerComponent />
                </PageBoxComponent>
            </div>
            <div class="distribution-of-sales">
                <PageBoxComponent Title="Distribution of Sales">
                    Distribution of Sales
                </PageBoxComponent>
            </div>
            <div class="top-3-states">
                <PageBoxComponent Title="Top 3 States (Sales)">
                    Top 3 States
                </PageBoxComponent>
            </div>
            <div class="top-3-cities">
                <PageBoxComponent Title="Top 3 Cities (Sales)">
                    Top 3 Cities
                </PageBoxComponent>
            </div>
            <div class="summary-matrix">
                <PageBoxComponent Title="Summary Matrix">
                    Summary Matrix
                </PageBoxComponent>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    private IDisposable? CountryRegionCodesSubscription { get; set; }

    private string SelectedCountries { get; set; } = string.Empty;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CountryRegionCodesSubscription = RegionalFilterStateProviderComponent.CountryRegionCodes.Subscribe(countryRegionCodes => HandleSelectedCountryChanged(countryRegionCodes));
        }
    }

    private void HandleSelectedCountryChanged(IEnumerable<string>? countryRegionCodes)
    {
        if (countryRegionCodes?.Any() is true)
        {
            var selectedCountries = DbFactory
                .CreateDbContext()
                .CountryRegions
                .Where(countryRegion => countryRegionCodes.Contains(countryRegion.CountryRegionCode))
                .OrderBy(countryRegion => countryRegion.Name)
                .Select(countryRegion => countryRegion.Name);

            SelectedCountries = string.Join(", ", selectedCountries);
        }
        else
        {
            SelectedCountries = string.Empty;
        }
    }

    private async Task HandleSelectCountryClickedAsync()
    {
        var parameters = new DialogParameters<SelectCountryDialog>
        {
            { selectCountryDialog => selectCountryDialog.InitiallySelectedCountryRegionCodes, RegionalFilterStateProviderComponent.CountryRegionCodes.Value?.ToList() }
        };

        var dialog = await DialogService.ShowAsync<SelectCountryDialog>("Select Country", parameters);

        var result = await dialog.Result;

        if (result?.Data is IEnumerable<string> selectedCountryRegionCodes)
        {
            await RegionalFilterStateProviderComponent.SetCountryRegionCodes(selectedCountryRegionCodes);
        }
    }

    public void Dispose()
    {
        CountryRegionCodesSubscription?.Dispose();
    }
}
