@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Entities
@using SalesDashboard.Enums
@using SalesDashboard.Helpers

@inject IDbContextFactory<AdventureWorksContext> DbFactory

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    public RegionalStateProviderComponent RegionalStateProviderComponent { get; set; } = null!;

    public async Task<decimal> GetTotalSalesAsync(EnumSalesChannel? salesChannel = null)
    {
        var period = RegionalStateProviderComponent.Period.Value;
        var countryRegionNames = RegionalStateProviderComponent.CountryRegionNames.Value;
        var productCategoryNames = RegionalStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = RegionalStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = RegionalStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        if (period is not null)
        {
            if (period.Start.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate >= period.Start.Value);
            }

            if (period.End.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate <= period.End.Value);
            }
        }

        if (countryRegionNames.Any())
        {
            query = query.Where(sod => countryRegionNames.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        if (salesChannel is not null)
        {
            if (salesChannel is EnumSalesChannel.Internet)
            {
                query = query.Where(sod => sod.SalesOrder.OnlineOrderFlag == true);
            }
            else if (salesChannel is EnumSalesChannel.Reseller)
            {
                query = query.Where(sod => sod.SalesOrder.OnlineOrderFlag == false);
            }
        }

        var totalSales = await query.SumAsync(sod => sod.LineTotal);

        return totalSales;
    }

    public async Task<decimal> GetTotalCostAsync(EnumSalesChannel? salesChannel = null)
    {
        var period = RegionalStateProviderComponent.Period.Value;
        var countryRegionNames = RegionalStateProviderComponent.CountryRegionNames.Value;
        var productCategoryNames = RegionalStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = RegionalStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = RegionalStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        if (period is not null)
        {
            if (period.Start.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate >= period.Start.Value);
            }

            if (period.End.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate <= period.End.Value);
            }
        }

        if (countryRegionNames.Any())
        {
            query = query.Where(sod => countryRegionNames.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        if (salesChannel is not null)
        {
            if (salesChannel is EnumSalesChannel.Internet)
            {
                query = query.Where(sod => sod.SalesOrder.OnlineOrderFlag == true);
            }
            else if (salesChannel is EnumSalesChannel.Reseller)
            {
                query = query.Where(sod => sod.SalesOrder.OnlineOrderFlag == false);
            }
        }

        var totalCost = await query.SumAsync(sod => sod.UnitCost * sod.OrderQty);

        return totalCost;
    }
}
