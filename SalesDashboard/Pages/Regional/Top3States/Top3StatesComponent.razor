@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<div class="top-3-states">
    <SpinnerOverlayComponent IsLoading="IsChartDataLoading">
        @if (Data.Any() is false)
        {
            <div class="no-data-or-trend">NO DATA</div>
        }
        else
        {
            <MudChart ChartType="ChartType.Pie" 
                      InputData="Data"
                      InputLabels="Labels"
                      Height="125px" />
        }
    </SpinnerOverlayComponent>
</div>

@code {
    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    private int DataSize { get; set; } = 3;

    private double[] Data { get; set; } = [77, 25, 5];

    private string[] Labels { get; set; } = ["California", "New South Wales", "England"];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // RegionalFilterChangedSubscription = RegionalFilterStateProviderComponent.RegionalFilterChanged
            //     .Throttle(TimeSpan.FromMilliseconds(25))
            //     .Subscribe(async _ => await RequeryChartDataAsync());

            // await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        await Task.Delay(2000);

        var from = RegionalFilterStateProviderComponent.From.Value;
        var through = RegionalFilterStateProviderComponent.Through.Value;
        var countryRegionCodes = RegionalFilterStateProviderComponent.CountryRegionCodes.Value;
        var productCategoryNames = RegionalFilterStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = RegionalFilterStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = RegionalFilterStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
    }
}
