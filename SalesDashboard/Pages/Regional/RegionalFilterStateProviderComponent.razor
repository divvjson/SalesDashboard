@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Entities
@using SalesDashboard.Services.Scoped.LocalStorage

@inject LocalStorageService LocalStorageService
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    public Subject<Unit> RegionalFilterChanged { get; private set; } = new();

    public BehaviorSubject<DateTime> From { get; private set; } = new(DateTime.Now);

    public BehaviorSubject<DateTime> Through { get; private set; } = new(DateTime.Now);

    public BehaviorSubject<IEnumerable<string>> CountryRegionCodes { get; private set; } = new([]);

    public BehaviorSubject<IEnumerable<string>> ProductCategoryNames { get; private set; } = new([]);

    public BehaviorSubject<IEnumerable<string>> ProductSubcategoryNames { get; private set; } = new([]);

    public BehaviorSubject<IEnumerable<string>> ProductNames { get; private set; } = new([]);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var from = await LocalStorageService.GetItemAsync<DateTime?>($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(From)}");

            await SetFromAsync(from);

            var through = await LocalStorageService.GetItemAsync<DateTime?>($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(Through)}");

            await SetThroughAsync(through);

            var countryRegionCodes = await LocalStorageService.GetItemAsync<List<string>?>($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(CountryRegionCodes)}");

            await SetCountryRegionCodesAsync(countryRegionCodes);

            var productCategoryNames = await LocalStorageService.GetItemAsync<List<string>?>($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(ProductCategoryNames)}");

            await SetProductCategoryNamesAsync(productCategoryNames);

            var productSubcategoryNames = await LocalStorageService.GetItemAsync<List<string>?>($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(ProductSubcategoryNames)}");

            await SetProductSubcategoryNamesAsync(productSubcategoryNames);

            var productNames = await LocalStorageService.GetItemAsync<List<string>?>($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(ProductNames)}");

            await SetProductNamesAsync(productNames);
        }
    }

    public async Task SetFromAsync(DateTime? from)
    {
        if (from is null)
        {
            from = await DbFactory.CreateDbContext().SalesOrderHeaders.MinAsync(soh => soh.OrderDate);
        }

        await LocalStorageService.SetItemAsync($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(From)}", from);

        From.OnNext(from ?? DateTime.Now);

        RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetThroughAsync(DateTime? through)
    {
        if (through is null)
        {
            through = await DbFactory.CreateDbContext().SalesOrderHeaders.MaxAsync(soh => soh.OrderDate);
        }

        await LocalStorageService.SetItemAsync($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(Through)}", through);

        Through.OnNext(through ?? DateTime.Now);

        RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetCountryRegionCodesAsync(IEnumerable<string>? countryRegionCodes)
    {
        if (countryRegionCodes is null)
        {
            countryRegionCodes = new List<string>();
        }

        await LocalStorageService.SetItemAsync($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(CountryRegionCodes)}", countryRegionCodes);

        CountryRegionCodes.OnNext(countryRegionCodes);

        RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetProductCategoryNamesAsync(IEnumerable<string>? productCategoryNames)
    {
        if (productCategoryNames is null)
        {
            productCategoryNames = new List<string>();
        }

        await SetProductSubcategoryNamesAsync(null);

        await LocalStorageService.SetItemAsync($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(ProductCategoryNames)}", productCategoryNames);

        ProductCategoryNames.OnNext(productCategoryNames);

        RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetProductSubcategoryNamesAsync(IEnumerable<string>? productSubcategoryNames)
    {
        if (productSubcategoryNames is null)
        {
            productSubcategoryNames = new List<string>();
        }

        await SetProductNamesAsync(null);

        await LocalStorageService.SetItemAsync($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(ProductSubcategoryNames)}", productSubcategoryNames);

        ProductSubcategoryNames.OnNext(productSubcategoryNames);

        RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetProductNamesAsync(IEnumerable<string>? productNames)
    {
        if (productNames is null)
        {
            productNames = new List<string>();
        }

        await LocalStorageService.SetItemAsync($"{nameof(RegionalFilterStateProviderComponent)}.{nameof(ProductNames)}", productNames);

        ProductNames.OnNext(productNames);

        RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task ResetAsync()
    {
        await Task.WhenAll([
            SetFromAsync(null),
            SetThroughAsync(null),
            SetCountryRegionCodesAsync(null),
            SetProductCategoryNamesAsync(null),
            SetProductSubcategoryNamesAsync(null),
            SetProductNamesAsync(null)
        ]);
    }
}
