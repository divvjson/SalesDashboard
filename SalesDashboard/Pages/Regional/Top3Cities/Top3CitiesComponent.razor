@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities
@using SalesDashboard.Extensions

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<SpinnerOverlayComponent IsVisible="IsChartDataLoading">
    <div class="top-3-cities">
        @if (Data is null)
        {
            
        }
        else
        {
            <MudChart ChartType="ChartType.Pie"
                      InputData="Data"
                      InputLabels="Labels"
                      Height="110px" />
        }
    </div>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    private int DataSize { get; set; } = 3;

    private double[]? Data { get; set; } = null;

    private string[]? Labels { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RegionalFilterChangedSubscription = RegionalFilterStateProviderComponent.RegionalFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryChartDataAsync());

            await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        var from = RegionalFilterStateProviderComponent.From.Value;
        var through = RegionalFilterStateProviderComponent.Through.Value;
        var countryRegionNames = RegionalFilterStateProviderComponent.CountryRegionNames.Value;
        var productCategoryNames = RegionalFilterStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = RegionalFilterStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = RegionalFilterStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        query = query.Where(sod => sod.SalesOrder.OrderDate >= from);
        query = query.Where(sod => sod.SalesOrder.OrderDate <= through);

        if (countryRegionNames.Any())
        {
            query = query.Where(sod => countryRegionNames.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        var top3Cities = await query
            .GroupBy(sod => new
            {
                City = sod.SalesOrder.BillToAddress.City
            })
            .Select(g => new Top3City
                {
                    City = g.Key.City,
                    TotalSales = g.Sum(sod => sod.LineTotal)
                })
            .OrderByDescending(top3City => top3City.TotalSales)
            .Take(3)
            .ToListAsync();

        if (top3Cities.Any())
        {
            Data = top3Cities
                .Select(top3City => (double)top3City.TotalSales)
                .ToArray();

            Labels = top3Cities
                .Select(top3City => $"{top3City.City} ({top3City.TotalSales.ToCurrencyWithTwoDecimalsInMillions()})")
                .ToArray();
        }
        else
        {
            Data = null;
            Labels = null;
        }

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
    }
}
