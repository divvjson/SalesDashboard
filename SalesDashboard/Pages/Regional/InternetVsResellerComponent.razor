@using SalesDashboard.Components.Shared.FigureBox
@using SalesDashboard.Components.Shared.PageBox
@using SalesDashboard.Enums
@using SalesDashboard.Extensions

@implements IDisposable

<div class="internet-vs-reseller">
    <PageBoxComponent Title="Total Sales IS" Size="EnumPageBoxSize.Small">
        <FigureBoxComponent Value="@TotalSalesIs.ToMillionsWithTwoDecimals()" IsLoading="IsFiguresLoading" />
    </PageBoxComponent>
    <PageBoxComponent Title="Total Cost IS" Size="EnumPageBoxSize.Small">
        <FigureBoxComponent Value="@TotalCostIs.ToMillionsWithTwoDecimals()" IsLoading="IsFiguresLoading" />
    </PageBoxComponent>
    <PageBoxComponent Title="Gross Profit IS" Size="EnumPageBoxSize.Small">
        <FigureBoxComponent Value="@GrossProfitIs.ToMillionsWithTwoDecimals()" IsLoading="IsFiguresLoading" />
    </PageBoxComponent>
    <PageBoxComponent Title="Gross Margin IS" Size="EnumPageBoxSize.Small">
        <FigureBoxComponent Value="@GrossMarginIs.ToPercentageWithTwoDecimals()" IsLoading="IsFiguresLoading" />
    </PageBoxComponent>
    <PageBoxComponent Title="Total Sales RS" Size="EnumPageBoxSize.Small">
        <FigureBoxComponent Value="@TotalSalesRs.ToMillionsWithTwoDecimals()" IsLoading="IsFiguresLoading" />
    </PageBoxComponent>
    <PageBoxComponent Title="Total Cost RS" Size="EnumPageBoxSize.Small">
        <FigureBoxComponent Value="@TotalCostRs.ToMillionsWithTwoDecimals()" IsLoading="IsFiguresLoading" />
    </PageBoxComponent>
    <PageBoxComponent Title="Gross Profit RS" Size="EnumPageBoxSize.Small">
        <FigureBoxComponent Value="@GrossProfitRs.ToMillionsWithTwoDecimals()" IsLoading="IsFiguresLoading" />
    </PageBoxComponent>
    <PageBoxComponent Title="Gross Margin RS" Size="EnumPageBoxSize.Small">
        <FigureBoxComponent Value="@GrossMarginRs.ToPercentageWithTwoDecimals()" IsLoading="IsFiguresLoading" />
    </PageBoxComponent>
</div>

@code {
    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    [CascadingParameter]
    public RegionalDataProviderComponent RegionalDataProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private bool IsFiguresLoading { get; set; } = true;

    private decimal TotalSalesIs { get; set; }

    private decimal TotalCostIs { get; set; }

    private decimal GrossProfitIs { get; set; }

    private decimal GrossMarginIs { get; set; }

    private decimal TotalSalesRs { get; set; }

    private decimal TotalCostRs { get; set; }

    private decimal GrossProfitRs { get; set; }

    private decimal GrossMarginRs { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RegionalFilterChangedSubscription = RegionalFilterStateProviderComponent.RegionalFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryFiguresAsync());

            await RequeryFiguresAsync();
        }
    }

    private async Task RequeryFiguresAsync()
    {
        IsFiguresLoading = true;

        await InvokeAsync(StateHasChanged);

        var getTotalSalesIsAsyncTask = RegionalDataProviderComponent.GetTotalSalesAsync(EnumSalesChannel.Internet);
        var getTotalCostIsAsyncTask = RegionalDataProviderComponent.GetTotalCostAsync(EnumSalesChannel.Internet);
        var getTotalSalesRsAsyncTask = RegionalDataProviderComponent.GetTotalSalesAsync(EnumSalesChannel.Reseller);
        var getTotalCostRsAsyncTask = RegionalDataProviderComponent.GetTotalCostAsync(EnumSalesChannel.Reseller);

        var result = await Task.WhenAll([getTotalSalesIsAsyncTask, getTotalCostIsAsyncTask, getTotalSalesRsAsyncTask, getTotalCostRsAsyncTask]);

        TotalSalesIs = result[0];
        TotalCostIs = result[1];
        GrossProfitIs = TotalSalesIs - TotalCostIs;

        if (TotalSalesIs != 0)
        {
            GrossMarginIs = GrossProfitIs / TotalSalesIs;
        }
        else
        {
            GrossMarginIs = 0;
        }

        TotalSalesRs = result[2];
        TotalCostRs = result[3];
        GrossProfitRs = TotalSalesRs - TotalCostRs;

        if (TotalSalesRs != 0)
        {
            GrossMarginRs = GrossProfitRs / TotalSalesRs;
        }
        else
        {
            GrossMarginRs = 0;
        }

        IsFiguresLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
    }
}
