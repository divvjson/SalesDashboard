@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Entities
@using SalesDashboard.Services
@using SalesDashboard.Types

@inject LocalStorageService LocalStorageService
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    private bool HasInitialized { get; set; }

    private bool IsResetting { get; set; }

    private Subject<Unit> _RegionalFilterChanged { get; set; } = new();

    public IObservable<Unit> RegionalFilterChanged => _RegionalFilterChanged.Where(_ => HasInitialized && !IsResetting);

    public Subject<Unit> TotalSalesRefreshed { get; private set; } = new();

    public Subject<Unit> TotalCostRefreshed { get; private set; } = new();

    public Subject<Unit> SalesTrendTop3CountriesRefreshed { get; private set; } = new();

    public Subject<Unit> InternetVsResellerRefreshed { get; private set; } = new();

    public Subject<Unit> DistributionOfSalesRefreshed { get; private set; } = new();

    public BehaviorSubject<DateTimeRange?> Period { get; set; } = new(null);

    public BehaviorSubject<IEnumerable<string>> CountryRegionNames { get; private set; } = new([]);

    public BehaviorSubject<IEnumerable<string>> ProductCategoryNames { get; private set; } = new([]);

    public BehaviorSubject<IEnumerable<string>> ProductSubcategoryNames { get; private set; } = new([]);

    public BehaviorSubject<IEnumerable<string>> ProductNames { get; private set; } = new([]);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var period = await LocalStorageService.GetItemAsync<DateTimeRange?>($"{nameof(RegionalStateProviderComponent)}.{nameof(Period)}");

            await SetPeriodAsync(period);

            var countryRegionNames = await LocalStorageService.GetItemAsync<List<string>?>($"{nameof(RegionalStateProviderComponent)}.{nameof(CountryRegionNames)}");

            await SetCountryRegionNamesAsync(countryRegionNames ?? []);

            var productCategoryNames = await LocalStorageService.GetItemAsync<List<string>?>($"{nameof(RegionalStateProviderComponent)}.{nameof(ProductCategoryNames)}");

            await SetProductCategoryNamesAsync(productCategoryNames ?? []);

            var productSubcategoryNames = await LocalStorageService.GetItemAsync<List<string>?>($"{nameof(RegionalStateProviderComponent)}.{nameof(ProductSubcategoryNames)}");

            await SetProductSubcategoryNamesAsync(productSubcategoryNames ?? []);

            var productNames = await LocalStorageService.GetItemAsync<List<string>?>($"{nameof(RegionalStateProviderComponent)}.{nameof(ProductNames)}");

            await SetProductNamesAsync(productNames ?? []);

            HasInitialized = true;
        }
    }

    public void NotifyRegionalFilterChanged()
    {
        _RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetPeriodAsync(DateTimeRange? period)
    {
        if (period is null)
        {
            using var context = DbFactory.CreateDbContext();

            period = new()
            {
                Start = await context.SalesOrderHeaders.MinAsync(soh => soh.OrderDate),
                End = await context.SalesOrderHeaders.MaxAsync(soh => soh.OrderDate)
            };
        }

        await LocalStorageService.SetItemAsync($"{nameof(RegionalStateProviderComponent)}.{nameof(Period)}", period);

        Period.OnNext(period);

        _RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetCountryRegionNamesAsync(IEnumerable<string> countryRegionNames)
    {
        await LocalStorageService.SetItemAsync($"{nameof(RegionalStateProviderComponent)}.{nameof(CountryRegionNames)}", countryRegionNames);

        CountryRegionNames.OnNext(countryRegionNames);

        _RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetProductCategoryNamesAsync(IEnumerable<string> productCategoryNames)
    {
        await SetProductSubcategoryNamesAsync([]);

        await LocalStorageService.SetItemAsync($"{nameof(RegionalStateProviderComponent)}.{nameof(ProductCategoryNames)}", productCategoryNames);

        ProductCategoryNames.OnNext(productCategoryNames);

        _RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetProductSubcategoryNamesAsync(IEnumerable<string> productSubcategoryNames)
    {
        await SetProductNamesAsync([]);

        await LocalStorageService.SetItemAsync($"{nameof(RegionalStateProviderComponent)}.{nameof(ProductSubcategoryNames)}", productSubcategoryNames);

        ProductSubcategoryNames.OnNext(productSubcategoryNames);

        _RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task SetProductNamesAsync(IEnumerable<string> productNames)
    {
        await LocalStorageService.SetItemAsync($"{nameof(RegionalStateProviderComponent)}.{nameof(ProductNames)}", productNames);

        ProductNames.OnNext(productNames);

        _RegionalFilterChanged.OnNext(Unit.Default);
    }

    public async Task ResetAsync()
    {
        IsResetting = true;

        await Task.WhenAll([
        SetPeriodAsync(null),
        SetCountryRegionNamesAsync([]),
        SetProductCategoryNamesAsync([]),
        SetProductSubcategoryNamesAsync([]),
        SetProductNamesAsync([])
        ]);

        IsResetting = false;

        _RegionalFilterChanged.OnNext(Unit.Default);
    }

    public int NumberOfFilterSettingsSet
    { 
        get
        {
            int count = 0;

            var properties = GetType()
                .GetProperties()
                .Where(property => property.PropertyType.IsGenericType)
                .Where(property => property.PropertyType.GetGenericTypeDefinition() == typeof(BehaviorSubject<>))
                .ToList();

            foreach (var property in properties)
            {
                var value = property.GetValue(this);

                if (value is null)
                {
                    continue;
                }

                var currentValue = value.GetType().GetProperty("Value")?.GetValue(value);

                if (currentValue is IEnumerable<object> enumerable)
                {
                    if (enumerable.Any())
                    {
                        count++;
                    }
                }
                else if (currentValue is not null)
                {
                    count++;
                }
            }

            return count;
        }
    }
}
