@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.ClickToUnlockOverlay
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities

@implements IDisposable
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<SpinnerOverlayComponent IsVisible="IsMapDataLoading">
    <ClickToUnlockOverlayComponent IsVisible="IsClickToUnlockVisible" OnUnlockClicked="HandleUnlockClicked" OnLockClicked="HandleLockClicked">
        <div id="distributionOfSalesMap" style="flex-grow: 1; min-height: 500px;"></div>
    </ClickToUnlockOverlayComponent>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private bool IsMapDataLoading { get; set; } = false;

    private bool IsClickToUnlockVisible { get; set; } = true;

    private IJSObjectReference JSModule { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"./Pages/Regional/DistributionOfSales/{nameof(DistributionOfSalesComponent)}.razor.js");

            await JSModule.InvokeVoidAsync("initializeMap");

            RegionalFilterChangedSubscription = RegionalFilterStateProviderComponent.RegionalFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryMapDataAsync());

            await RequeryMapDataAsync();
        }
    }

    private void HandleUnlockClicked()
    {
        IsClickToUnlockVisible = false;
    }

    private void HandleLockClicked()
    {
        IsClickToUnlockVisible = true;
    }

    private async Task RequeryMapDataAsync()
    {
        IsMapDataLoading = true;

        await InvokeAsync(StateHasChanged);

        var period = RegionalFilterStateProviderComponent.Period.Value;
        var countryRegionNames = RegionalFilterStateProviderComponent.CountryRegionNames.Value;
        var productCategoryNames = RegionalFilterStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = RegionalFilterStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = RegionalFilterStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        if (period is not null)
        {
            if (period.Start.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate >= period.Start.Value);
            }

            if (period.End.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate <= period.End.Value);
            }
        }

        if (countryRegionNames.Any())
        {
            query = query.Where(sod => countryRegionNames.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        var stateProvinceSales = await query
            .GroupBy(sod => new
            {
                sod.SalesOrder.BillToAddress.StateProvince.StateProvinceId,
                StateProvinceName = sod.SalesOrder.BillToAddress.StateProvince.Name,
                CountryRegionName = sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name,
                Latitude = sod.SalesOrder.BillToAddress.StateProvince.Latitude,
                Longitude = sod.SalesOrder.BillToAddress.StateProvince.Longitude
            })
            .Select(g => new StateProvinceSale
            {
                StateProvinceId = g.Key.StateProvinceId,
                StateProvinceName = g.Key.StateProvinceName,
                CountryRegionName = g.Key.CountryRegionName,
                Latitude = g.Key.Latitude,
                Longitude = g.Key.Longitude,
                Sales = g.Sum(sod => sod.LineTotal)
            })
            .ToListAsync();

        await JSModule.InvokeVoidAsync("updateMap", stateProvinceSales);

        IsMapDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
    }
}
