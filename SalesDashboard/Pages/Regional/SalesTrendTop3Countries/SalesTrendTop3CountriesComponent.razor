@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities
@using SalesDashboard.Services

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject CircuitAccessor CircuitAccessor

<SpinnerOverlayComponent IsVisible="IsChartDataLoading">
    <div class="sales-trend-top-3-countries">
        @if (ChartSeries.Any() is false)
        {
            
        }
        else if (Years.Count() is 1)
        {
            
        }
        else
        {
            <MudChart ChartType="ChartType.Line"
                      ChartSeries="ChartSeries"
                      ChartOptions="ChartOptions"
                      XAxisLabels="Years"
                      Width="100%"
                      Height="100%" />
        }
    </div>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public RegionalStateProviderComponent RegionalStateProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private IDisposable? SalesTrendTop3CountriesRefreshedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    private string[] Years { get; set; } = [];

    private List<ChartSeries> ChartSeries { get; set; } = new();

    private ChartOptions ChartOptions { get; set; } = new()
    {
        YAxisTicks = 2,
        YAxisFormat = "$0M"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RegionalFilterChangedSubscription = RegionalStateProviderComponent.RegionalFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryChartDataAsync());

            SalesTrendTop3CountriesRefreshedSubscription = RegionalStateProviderComponent.SalesTrendTop3CountriesRefreshed
                .Subscribe(async _ => await RequeryChartDataAsync());

            await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        var period = RegionalStateProviderComponent.Period.Value;
        var countryRegionNames = RegionalStateProviderComponent.CountryRegionNames.Value;
        var productCategoryNames = RegionalStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = RegionalStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = RegionalStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        if (period is not null)
        {
            if (period.Start.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate >= period.Start.Value);
            }

            if (period.End.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate <= period.End.Value);
            }
        }

        if (countryRegionNames.Any())
        {
            query = query.Where(sod => countryRegionNames.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        var items = await query
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.COMMAND_NAME, "Sales Trend Top 3 Countries"))
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.CIRCUIT_ID, CircuitAccessor.CircuitId))
            .GroupBy(sod => new
            {
                CountryName = sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name,
                Year = sod.SalesOrder.OrderDate.Year,
            })
            .Select(g => new
            {
                g.Key.CountryName,
                g.Key.Year,
                TotalSales = g.Sum(sod => sod.LineTotal)
            })
            .GroupBy(x => x.CountryName)
            .Select(g => new
            {
                CountryName = g.Key,
                TotalSales = g.Sum(s => s.TotalSales),
                SalesYears = g.Select(s => new SalesYear
                {
                    Year = s.Year,
                    TotalSales = s.TotalSales
                })
            })
            .OrderByDescending(g => g.TotalSales)
            .Take(3)
            .Select(x => new SalesTrendTop3CountriesItem
            {
                CountryName = x.CountryName,
                SalesYears = x.SalesYears
            })
            .ToListAsync();

        var years = items
            .SelectMany(item => item.SalesYears.Select(salesYear => salesYear.Year.ToString()))
            .Distinct()
            .ToArray();

        var chartSeries = items
            .Select(item => new ChartSeries
            {
                Name = item.CountryName,
                Data = item.SalesYears.Select(salesYear => Convert.ToDouble(salesYear.TotalSales / 1000000)).ToArray()
            })
            .ToList();

        Years = years;
        ChartSeries = chartSeries;

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
        SalesTrendTop3CountriesRefreshedSubscription?.Dispose();
    }
}
