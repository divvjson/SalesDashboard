@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Entities

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<div class="sales-trend-top-3-countries">
    <SpinnerOverlayComponent IsLoading="IsChartDataLoading">
        @if (ChartSeries.Any() is false)
        {
            <div class="no-data-or-trend">NO DATA</div>
        }
        else if (Years.Count() is 1)
        {
            <div class="no-data-or-trend">NO TREND</div>
        }
        else
        {
            <MudChart ChartType="ChartType.Line"
                      ChartSeries="ChartSeries"
                      ChartOptions="ChartOptions"
                      XAxisLabels="Years"
                      Width="100%"
                      Height="100%" />
        }
    </SpinnerOverlayComponent>
</div>

@code {
    [CascadingParameter]
    public RegionalFilterStateProviderComponent RegionalFilterStateProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private bool IsChartDataLoading { get; set; } = false;

    private string[] Years { get; set; } = [];

    private List<ChartSeries> ChartSeries { get; set; } = new();

    private ChartOptions ChartOptions { get; set; } = new()
    {
        YAxisTicks = 2,
        YAxisFormat = "0M"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RegionalFilterChangedSubscription = RegionalFilterStateProviderComponent.RegionalFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryChartDataAsync());

            await RequeryChartDataAsync();
        }
    }

    private async Task RequeryChartDataAsync()
    {
        IsChartDataLoading = true;

        await InvokeAsync(StateHasChanged);

        var from = RegionalFilterStateProviderComponent.From.Value;
        var through = RegionalFilterStateProviderComponent.Through.Value;
        var countryRegionCodes = RegionalFilterStateProviderComponent.CountryRegionCodes.Value;
        var productCategoryNames = RegionalFilterStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = RegionalFilterStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = RegionalFilterStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        query = query.Where(sod => sod.SalesOrder.OrderDate >= from);
        query = query.Where(sod => sod.SalesOrder.OrderDate <= through);

        if (countryRegionCodes.Any())
        {
            query = query.Where(sod => countryRegionCodes.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCode));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        var sales = await query
            .GroupBy(sod => new { sod.SalesOrder.OrderDate.Year, sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name })
            .Select(g => new Sale
                {
                    Year = g.Key.Year,
                    CountryName = g.Key.Name,
                    TotalSales = g.Sum(sod => sod.LineTotal)
                })
            .ToListAsync();

        var years = sales
            .Select(sale => sale.Year)
            .Distinct()
            .OrderBy(year => year)
            .ToArray();

        var top3Countries = sales
            .GroupBy(sale => sale.CountryName)
            .Select(g => new
            {
                CountryName = g.Key,
                TotalSales = g.Sum(sale => sale.TotalSales)
            })
            .OrderByDescending(x => x.TotalSales)
            .Take(3)
            .Select(x => x.CountryName)
            .ToList();

        var filteredSales = sales
            .Where(sale => top3Countries.Contains(sale.CountryName))
            .ToList();

        var chartSeries = filteredSales
            .GroupBy(c => c.CountryName)
            .Select(g => new ChartSeries
                {
                    Name = g.Key,
                    Data = years.Select(year => Convert.ToDouble(g.FirstOrDefault(x => x.Year == year)?.TotalSales / 1000000 ?? 0)).ToArray()
                })
            .ToList();

        Years = years
            .Select(year => year.ToString())
            .ToArray();

        ChartSeries = chartSeries;

        IsChartDataLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
    }
}
