@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.SpinnerOverlay
@using SalesDashboard.Components.Shared.SummaryMatrixTh
@using SalesDashboard.Entities
@using SalesDashboard.Extensions
@using SalesDashboard.Helpers
@using SalesDashboard.Services

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory
@inject CircuitAccessor CircuitAccessor

<SpinnerOverlayComponent IsVisible="IsLoading">
    <MudTable ContainerClass="summary-matrix"
              FixedHeader="true"
              T="RegionalSummaryMatrixItem"
              Items="RegionalSummaryMatrixGridItems"
              GroupBy="GroupDefinition"
              Breakpoint="Breakpoint.None"
              Dense="true"
              Striped="true">
        <HeaderContent>
            <MudTh>Region</MudTh>
            <MudTh>State</MudTh>
            <MudTh>City</MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Qty Sold" AggregationMethod="EnumAggregationMethod.Sum" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Sales" AggregationMethod="EnumAggregationMethod.Sum" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Costs" AggregationMethod="EnumAggregationMethod.Sum" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Gross Profit" AggregationMethod="EnumAggregationMethod.Sum" />
            </MudTh>
            <MudTh>
                <SummaryMatrixThComponent Title="Gross Margin" AggregationMethod="EnumAggregationMethod.Average" />
            </MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            @if (context.GroupName is nameof(RegionalSummaryMatrixItem.CountryRegionName))
            {
                <MudTh colspan="3" style="@GetGroupHeaderRowStyle(context)">@context.Key</MudTh>
            }
            else if (context.GroupName is nameof(RegionalSummaryMatrixItem.StateProvinceName))
            {
                <MudTh></MudTh>
                <MudTh colspan="2" style="@GetGroupHeaderRowStyle(context)">@context.Key</MudTh>
            }
            else if (context.GroupName is nameof(RegionalSummaryMatrixItem.City))
            {
                <MudTh></MudTh>
                <MudTh></MudTh>
                <MudTh style="@GetGroupHeaderRowStyle(context)">@context.Key</MudTh>
            }
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @context.Items.Sum(item => item.QuantitySold)
            </MudTh>
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @if (context.GroupName is nameof(RegionalSummaryMatrixItem.CountryRegionName))
                {
                    @context.Items.Sum(item => item.TotalSales).ToCurrencyWithTwoDecimalsInMillions()
                }
                else
                {
                    @context.Items.Sum(item => item.TotalSales).ToCurrencyWithTwoDecimals()
                }
            </MudTh>
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @if (context.GroupName is nameof(RegionalSummaryMatrixItem.CountryRegionName))
                {
                    @context.Items.Sum(item => item.TotalCosts).ToCurrencyWithTwoDecimalsInMillions()
                }
                else
                {
                    @context.Items.Sum(item => item.TotalCosts).ToCurrencyWithTwoDecimals()
                }
            </MudTh>
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @if (context.GroupName is nameof(RegionalSummaryMatrixItem.CountryRegionName))
                {
                    @context.Items.Sum(item => item.GrossProfit).ToCurrencyWithTwoDecimalsInMillions()
                }
                else
                {
                    @context.Items.Sum(item => item.GrossProfit).ToCurrencyWithTwoDecimals()
                }
            </MudTh>
            <MudTh style="@GetGroupHeaderRowStyle(context)">
                @($"{GetGrossMargin(context.Items).ToString("F2")}%")
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Region">@context.CountryRegionName</MudTd>
            <MudTd DataLabel="State">@context.StateProvinceName</MudTd>
            <MudTd DataLabel="City">@context.City</MudTd>
            <MudTd DataLabel="Qty Sold">@context.QuantitySold</MudTd>
            <MudTd DataLabel="Sales">@context.TotalSales.ToCurrencyWithTwoDecimalsInMillions()</MudTd>
            <MudTd DataLabel="Costs">@context.TotalCosts.ToCurrencyWithTwoDecimalsInMillions()</MudTd>
            <MudTd DataLabel="Gross Profit">@context.GrossProfit.ToCurrencyWithTwoDecimalsInMillions()</MudTd>
            <MudTd DataLabel="Gross Margin">@($"{context.GrossMargin.ToString("F2")}%")</MudTd>
        </RowTemplate>
    </MudTable>
</SpinnerOverlayComponent>

@code {
    [CascadingParameter]
    public RegionalStateProviderComponent RegionalStateProviderComponent { get; set; } = null!;

    private IDisposable? RegionalFilterChangedSubscription { get; set; }

    private IDisposable? RegionalSummaryMatrixRefreshedSubscription { get; set; }

    private bool IsLoading { get; set; } = false;

    private List<RegionalSummaryMatrixItem> RegionalSummaryMatrixGridItems { get; set; } = [];

    private TableGroupDefinition<RegionalSummaryMatrixItem> GroupDefinition { get; set; } = new()
    {
        GroupName = nameof(RegionalSummaryMatrixItem.CountryRegionName),
        IsInitiallyExpanded = false,
        Indentation = true,
        Expandable = true,
        Selector = (item) => item.CountryRegionName,
        InnerGroup = new()
        {
            GroupName = nameof(RegionalSummaryMatrixItem.StateProvinceName),
            IsInitiallyExpanded = false,
            Indentation = true,
            Expandable = true,
            Selector = (item) => item.StateProvinceName,
            InnerGroup = new()
            {
                GroupName = nameof(RegionalSummaryMatrixItem.City),
                IsInitiallyExpanded = false,
                Indentation = true,
                Expandable = false,
                Selector = (item) => item.City
            }
        }
    };

    private string GetGroupHeaderRowStyle(TableGroupData<object, RegionalSummaryMatrixItem> context)
    {
        var styleString = "";

        switch (context.GroupName)
        {
            case nameof(RegionalSummaryMatrixItem.CountryRegionName):
                styleString += " font-weight: 500;";
                break;
            case nameof(RegionalSummaryMatrixItem.StateProvinceName):
                styleString += " font-weight: 400;";
                break;
            case nameof(RegionalSummaryMatrixItem.City):
                styleString += " font-weight: 300;";
                break;
        }

        return styleString;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RegionalFilterChangedSubscription = RegionalStateProviderComponent.RegionalFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryAsync());

            RegionalSummaryMatrixRefreshedSubscription = RegionalStateProviderComponent.RegionalSummaryMatrixRefreshed
                .Subscribe(async _ => await RequeryAsync());

            await RequeryAsync();
        }
    }

    private async Task RequeryAsync()
    {
        IsLoading = true;

        await InvokeAsync(StateHasChanged);

        var period = RegionalStateProviderComponent.Period.Value;
        var countryRegionNames = RegionalStateProviderComponent.CountryRegionNames.Value;
        var productCategoryNames = RegionalStateProviderComponent.ProductCategoryNames.Value;
        var productSubcategoryNames = RegionalStateProviderComponent.ProductSubcategoryNames.Value;
        var productNames = RegionalStateProviderComponent.ProductNames.Value;

        using var context = DbFactory.CreateDbContext();

        var query = context.SalesOrderDetails.AsQueryable();

        if (period is not null)
        {
            if (period.Start.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate >= period.Start.Value);
            }

            if (period.End.HasValue)
            {
                query = query.Where(sod => sod.SalesOrder.OrderDate <= period.End.Value);
            }
        }

        if (countryRegionNames.Any())
        {
            query = query.Where(sod => countryRegionNames.Contains(sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name));
        }

        if (productCategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productCategoryNames.Contains(sod.Product.ProductSubcategory.ProductCategory.Name));
        }

        if (productSubcategoryNames.Any())
        {
            query = query.Where(sod => sod.Product.ProductSubcategory != null && productSubcategoryNames.Contains(sod.Product.ProductSubcategory.Name));
        }

        if (productNames.Any())
        {
            query = query.Where(sod => productNames.Contains(sod.Product.Name));
        }

        var items = await query
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.COMMAND_NAME, "Regional Summary Matrix"))
            .TagWith(DbCommandService.GetDbCommandTag(EnumDbCommandTag.CIRCUIT_ID, CircuitAccessor.CircuitId))
            .GroupBy(sod => new
            {
                CountryRegionName = sod.SalesOrder.BillToAddress.StateProvince.CountryRegionCodeNavigation.Name,
                StateProvinceName = sod.SalesOrder.BillToAddress.StateProvince.Name,
                City = sod.SalesOrder.BillToAddress.City,
            })
            .Select(g => new RegionalSummaryMatrixItem
            {
                CountryRegionName = g.Key.CountryRegionName,
                StateProvinceName = g.Key.StateProvinceName,
                City = g.Key.City,
                QuantitySold = g.Sum(sod => sod.OrderQty),
                TotalSales = g.Sum(sod => sod.LineTotal),
                TotalCosts = g.Sum(sod => sod.UnitCost * sod.OrderQty),
                GrossProfit = g.Sum(sod => sod.LineTotal - (sod.UnitCost * sod.OrderQty)),
                GrossMargin = g.Sum(sod => sod.LineTotal == 0 ? 0 : sod.LineTotal - (sod.UnitCost * sod.OrderQty) / sod.LineTotal * 100)
            })
            .OrderBy(item => item.CountryRegionName)
            .ThenBy(item => item.StateProvinceName)
            .ThenBy(item => item.City)
            .ToListAsync();

        if (items.Any())
        {
            RegionalSummaryMatrixItem summaryRow = new()
            {
                CountryRegionName = string.Empty,
                StateProvinceName = string.Empty,
                City = string.Empty,
                QuantitySold = items.Sum(item => item.QuantitySold),
                TotalSales = items.Sum(item => item.TotalSales),
                TotalCosts = items.Sum(item => item.TotalCosts),
                GrossProfit = items.Sum(item => item.TotalSales) - items.Sum(item => item.TotalCosts),
                GrossMargin = GetGrossMargin(items)
            };

            items.Add(summaryRow);
        }

        RegionalSummaryMatrixGridItems = items;

        IsLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    private decimal GetGrossMargin(IEnumerable<RegionalSummaryMatrixItem> items)
    {
        if (items.Sum(item => item.TotalSales) is 0)
        {
            return 0;
        }
        else
        {
            return (items.Sum(item => item.TotalSales) - items.Sum(item => item.TotalCosts)) / items.Sum(item => item.TotalSales) * 100;
        }
    }

    public void Dispose()
    {
        RegionalFilterChangedSubscription?.Dispose();
        RegionalSummaryMatrixRefreshedSubscription?.Dispose();
    }
}
