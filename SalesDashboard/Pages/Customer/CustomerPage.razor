@page "/Customer"
@using Microsoft.EntityFrameworkCore
@using SalesDashboard.Components.Shared.FigureBox
@using SalesDashboard.Components.Shared.PageBox
@using SalesDashboard.Entities

@implements IDisposable
@inject IDbContextFactory<AdventureWorksContext> DbFactory

<PageTitle>Customer Analysis</PageTitle>

<div class="customer">
    <div class="customer-container mud-elevation-4">
        <div class="header">
            <div></div>
            <div class="header-title">Customer Analysis</div>
            <MudTooltip Text="Refresh">
                <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Variant="Variant.Filled" OnClick="HandleRefreshClicked" />
            </MudTooltip>
        </div>
        <div class="grid">
            <div class="number-of-registered-customers">
                <PageBoxComponent Title="Number of Registered Customers">
                    <FigureBoxComponent Value="@NumberOfRegisteredCustomers.ToString()" IsLoading="IsFiguresLoading" />
                </PageBoxComponent>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public CustomerFilterStateProviderComponent CustomerFilterStateProviderComponent { get; set; } = null!;

    private IDisposable? CustomerFilterChangedSubscription { get; set; }

    private bool IsFiguresLoading { get; set; } = true;

    private int NumberOfRegisteredCustomers { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CustomerFilterChangedSubscription = CustomerFilterStateProviderComponent.CustomerFilterChanged
                .Throttle(TimeSpan.FromMilliseconds(25))
                .Subscribe(async _ => await RequeryFiguresAsync());

            await RequeryFiguresAsync();
        }
    }

    private void HandleRefreshClicked()
    {
        CustomerFilterStateProviderComponent.CustomerFilterChanged.OnNext(Unit.Default);
    }

    private async Task RequeryFiguresAsync()
    {
        IsFiguresLoading = true;

        await InvokeAsync(StateHasChanged);

        using var context = DbFactory.CreateDbContext();

        NumberOfRegisteredCustomers = await context.Customers.CountAsync();

        IsFiguresLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CustomerFilterChangedSubscription?.Dispose();
    }
}
