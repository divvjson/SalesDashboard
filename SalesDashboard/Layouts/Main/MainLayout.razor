@using SalesDashboard.Components.StateProviders.DeviceStateProvider
@using SalesDashboard.Components.StateProviders.DrawerStateProvider

@inherits LayoutComponentBase

@implements IDisposable

<MudThemeProvider Theme="Theme" />
<MudPopoverProvider />
<MudDialogProvider
    BackdropClick="false"
    NoHeader="true"
    MaxWidth="MaxWidth.ExtraExtraLarge" />
<MudSnackbarProvider />

<div class="main-layout">
    <div class="bar-container mud-elevation-4">
        <BarComponent />
    </div>
    <div style="@GetDrawerOverlayStyle()" class="drawer-overlay" @onclick="DrawerStateProviderComponent.Close" />
    <div class="drawer-container">
        <div style="@GetDrawerStyle()" class="drawer mud-elevation-4">
            <DrawerComponent />
        </div>
        <div style="@GetDrawerContentStyle()" class="drawer-content">
            @Body
        </div>
    </div>
    <div class="console-container mud-elevation-4">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at nisi sit amet nisi feugiat mattis sed posuere lectus. Duis cursus dolor ut dui ornare tempus. Ut consequat ac metus eget pretium. Fusce non odio orci. Integer id auctor nunc, sit amet mattis augue. Sed pharetra purus non ligula efficitur, ac lacinia orci porttitor. Proin egestas quis eros in porta. Aenean eget metus egestas, feugiat purus sit amet, accumsan nibh. Mauris urna velit, tempus nec turpis ut, molestie blandit quam. Sed in neque lobortis, pellentesque ligula at, feugiat turpis. Curabitur imperdiet efficitur nibh, vel auctor nunc consectetur in. Maecenas a pulvinar lorem. Pellentesque lacinia, justo in porttitor venenatis, sem purus blandit nisl, at accumsan leo quam nec risus.

        Ut congue pharetra quam non finibus. Ut vitae hendrerit turpis, consequat iaculis mauris. Praesent suscipit mauris quis molestie pretium. Vestibulum maximus massa nec consequat dapibus. Vivamus feugiat aliquam mi. Duis facilisis luctus odio. Nam dictum ullamcorper facilisis. Nullam feugiat bibendum sem, ac rhoncus eros eleifend quis.

        Donec auctor augue a velit maximus, sit amet porttitor lectus mollis. Aliquam eget erat nisl. Quisque id ligula ut eros dignissim bibendum id rhoncus arcu. Praesent a luctus eros, eget porta libero. Donec ac molestie turpis. Maecenas tristique arcu dignissim libero laoreet, sit amet placerat dui faucibus. Duis nec lorem consequat, laoreet justo ac, dignissim odio. Donec condimentum enim justo, in fringilla felis molestie et. Phasellus vel metus est. Sed consequat nulla elit, ac mollis ex varius sit amet. Nunc placerat at neque a imperdiet. Sed nisi nisl, dictum sit amet libero quis, commodo malesuada augue. Donec venenatis ligula augue. Aliquam ante massa, fringilla quis arcu ac, ultrices viverra velit. Maecenas et lacus non dolor lobortis mollis.
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [CascadingParameter]
    public DeviceStateProviderComponent DeviceStateProviderComponent { get; set; } = null!;

    [CascadingParameter]
    public DrawerStateProviderComponent DrawerStateProviderComponent { get; set; } = null!;

    public IDisposable? FormFactorStateSubscription { get; set; }

    private MudTheme Theme { get; set; } = new()
    {
        Typography = new()
        {
            Default = new()
            {
                FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" }
            }
        }
    };

    protected override void OnInitialized()
    {
        FormFactorStateSubscription = DeviceStateProviderComponent.FormFactorStateSubject.Subscribe(formFactorState =>
        {
            if (formFactorState.Previous is null && formFactorState.Current is EnumFormFactorState.Desktop)
            {
                DrawerStateProviderComponent.Open();
            }
            else if (formFactorState.Previous is EnumFormFactorState.Handset && formFactorState.Current is EnumFormFactorState.Desktop)
            {
                DrawerStateProviderComponent.Open();
            }
            else if (formFactorState.Previous is EnumFormFactorState.Desktop && formFactorState.Current is EnumFormFactorState.Handset)
            {
                DrawerStateProviderComponent.Close();
            }
        });
    }

    private string GetDrawerOverlayStyle()
    {
        if (DeviceStateProviderComponent.FormFactorStateSubject.Value.Current is EnumFormFactorState.Handset && DrawerStateProviderComponent.DrawerStateSubject.Value is EnumDrawerState.Open)
        {
            return "display: unset; opacity: 1; pointer-events: auto;";
        }
        else
        {
            return "display: unset; opacity: 0; pointer-events: none;";
        }
    }

    private string GetDrawerStyle()
    {
        if (DrawerStateProviderComponent.DrawerStateSubject.Value is EnumDrawerState.Open)
        {
            return "display: unset; left: 0px;";
        }
        else
        {
            return "display: unset; left: calc(-1 * var(--drawer-width));";
        }
    }

    private string GetDrawerContentStyle()
    {
        if (DeviceStateProviderComponent.FormFactorStateSubject.Value.Current is EnumFormFactorState.Desktop && DrawerStateProviderComponent.DrawerStateSubject.Value is EnumDrawerState.Open)
        {
            return "left: var(--drawer-width); width: calc(100% - var(--drawer-width));";
        }
        else
        {
            return "left: 0px; width: 100%;";
        }
    }

    public void Dispose()
    {
        FormFactorStateSubscription?.Dispose();
    }
}
