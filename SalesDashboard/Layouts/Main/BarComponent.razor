@using SalesDashboard.Components.StateProviders.ConsoleStateProvider
@using SalesDashboard.Components.StateProviders.DeviceStateProvider
@using SalesDashboard.Components.StateProviders.DrawerStateProvider

@implements IDisposable
@inject IDialogService DialogService

<div class="bar">
    <MudTooltip Text="Menu" Delay="500" Placement="Placement.Right">
        <div class="bar-button mud-ripple" @onclick="DrawerStateProviderComponent.Toggle">
            <MudIcon Icon="@Icons.Material.Outlined.Menu" />
        </div>
    </MudTooltip>
    <div class="title-container">
        <div class="title">Adventure Works</div>
        <div class="sub-title">Sales Dashboard</div>
    </div>
    <MudTooltip Text="Console" Delay="500" Placement="Placement.Left">
        <div class="bar-button mud-ripple" @onclick="ConsoleStateProviderComponent.Toggle">
            <MudBadge Content="NumberOfNewConsoleLogEntries"
                      Visible="NumberOfNewConsoleLogEntries > 0"
                      Overlap="true"
                      Color="Color.Error">
                <MudIcon Icon="@Icons.Material.Outlined.WebAsset" />
            </MudBadge>
        </div>
    </MudTooltip>
</div>

@code {
    [CascadingParameter]
    public DrawerStateProviderComponent DrawerStateProviderComponent { get; set; } = null!;

    [CascadingParameter]
    public ConsoleStateProviderComponent ConsoleStateProviderComponent { get; set; } = null!;

    [CascadingParameter]
    public DeviceStateProviderComponent DeviceStateProviderComponent { get; set; } = null!;

    private IDisposable? NumberOfNewConsoleLogEntriesSubcription { get; set; }

    public int NumberOfNewConsoleLogEntries { get; set; } = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            NumberOfNewConsoleLogEntriesSubcription = ConsoleStateProviderComponent.NumberOfNewConsoleLogEntriesSubject
                .Subscribe(async value =>
                {
                    NumberOfNewConsoleLogEntries = value;
                    await InvokeAsync(StateHasChanged);
                });
        }
    }

    public void Dispose()
    {
        NumberOfNewConsoleLogEntriesSubcription?.Dispose();
    }
}
