@using SalesDashboard.Components.StateProviders.ConsoleStateProvider
@using SalesDashboard.Services

@implements IDisposable
@inject IJSRuntime JSRuntime

<div class="console">
    <div class="console-area">
        @foreach (var log in ConsoleLog)
        {
            @if (ConsoleLog.IndexOf(log) != 0)
            {
                <MudDivider />
            }
            <div class="console-log">
                <pre><code>@log.CommandName</code></pre>
                <pre><code class="command-text language-sql">@log.CommandText</code></pre>
            </div>
        }
    </div>
    <div class="console-actions">
        <MudTooltip Text="Close" Placement="Placement.Left" Delay="500">
            <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="ConsoleStateProviderComponent.Close" Color="Color.Inherit" />
        </MudTooltip>
        <MudTooltip Text="Clear" Placement="Placement.Left" Delay="500">
            <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever" OnClick="ConsoleLog.Clear" Color="Color.Inherit" />
        </MudTooltip>
    </div>
</div>

@code {
    [CascadingParameter]
    public ConsoleStateProviderComponent ConsoleStateProviderComponent { get; set; } = null!;

    private IDisposable? LatestConsoleLogEntrySubscription { get; set; }

    private List<AdventureWorksDbCommandInfo> ConsoleLog { get; set; } = [];

    private IJSObjectReference JSModule { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"./Layouts/Main/{nameof(ConsoleComponent)}.razor.js");

            ConsoleLog = ConsoleStateProviderComponent
                .GetDbCommandInfoEntries()
                .Select(keyValuePair => keyValuePair.Value)
                .ToList();

            await JSModule.InvokeVoidAsync("highlightCommandText");

            LatestConsoleLogEntrySubscription = ConsoleStateProviderComponent.LatestConsoleLogEntrySubject
                .Subscribe(async entry => await HandleLatestConsoleLogEntryAsync(entry));
        }
    }

    private async Task HandleLatestConsoleLogEntryAsync(AdventureWorksDbCommandInfo? latestConsoleLogEntry)
    {
        if (latestConsoleLogEntry is null)
        {
            return;
        }

        var formattedCommandText = await JSModule.InvokeAsync<string>("getFormattedCommandText", latestConsoleLogEntry.CommandText);

        latestConsoleLogEntry.CommandText = formattedCommandText;

        ConsoleLog.Add(latestConsoleLogEntry);

        await InvokeAsync(StateHasChanged);

        await JSModule.InvokeVoidAsync("highlightCommandText");
    }

    public void Dispose()
    {
        LatestConsoleLogEntrySubscription?.Dispose();
    }
}
