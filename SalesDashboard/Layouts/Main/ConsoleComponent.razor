@using SalesDashboard.Components.StateProviders.ConsoleStateProvider
@using SalesDashboard.Services

@implements IDisposable
@inject IJSRuntime JSRuntime

<div class="console">
    <div class="console-area">
        @foreach (var log in ConsoleLog)
        {
            <MudChip T="string" Color="Color.Dark">@log.CommandName</MudChip>
            <pre>
                <code class="command-text language-sql">@log.CommandText</code>
            </pre>
            <br />
        }
    </div>
    <div class="console-actions">
        <MudTooltip Text="Close" Placement="Placement.Left" Delay="500">
            <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="ConsoleStateProviderComponent.Close" Color="Color.Inherit" />
        </MudTooltip>
        <MudTooltip Text="Clear" Placement="Placement.Left" Delay="500">
            <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever" OnClick="Clear" Color="Color.Inherit" />
        </MudTooltip>
    </div>
</div>

@code {
    [CascadingParameter]
    public ConsoleStateProviderComponent ConsoleStateProviderComponent { get; set; } = null!;

    private IDisposable? LatestConsoleLogEntrySubscription { get; set; }

    private List<AdventureWorksDbCommandInfo> ConsoleLog { get; set; } = [];

    private static SemaphoreSlim semaphore = new SemaphoreSlim(1, 1);

    private IJSObjectReference JSModule { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"./Layouts/Main/{nameof(ConsoleComponent)}.razor.js");

            LatestConsoleLogEntrySubscription = ConsoleStateProviderComponent.LatestConsoleLogEntrySubject
                .Subscribe(async entry => await HandleLatestConsoleLogEntry(entry));
        }
    }

    private async Task HandleLatestConsoleLogEntry(AdventureWorksDbCommandInfo? latestConsoleLogEntry)
    {
        await semaphore.WaitAsync();

        try
        {
            if (latestConsoleLogEntry is not null)
            {
                var formattedCommandText = await JSModule.InvokeAsync<string>("getFormattedCommandText", latestConsoleLogEntry.CommandText);

                latestConsoleLogEntry.CommandText = formattedCommandText;

                ConsoleLog.Add(latestConsoleLogEntry);

                await InvokeAsync(StateHasChanged);

                await JSRuntime.InvokeVoidAsync("hljs.highlightAll");
            }
        }
        finally
        {
            semaphore.Release();
        }
    }

    private void Clear()
    {
        ConsoleLog.Clear();
    }

    public void Dispose()
    {
        LatestConsoleLogEntrySubscription?.Dispose();
    }
}
